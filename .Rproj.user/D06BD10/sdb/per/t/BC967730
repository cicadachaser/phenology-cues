{
    "collab_server" : "",
    "contents" : "#Script for carrying out simulations of evolution of emergence decisions\n#Uses windows_subs.R, windows_save.R, and windows_plot.R\n\n#clear all variables\nrm(list=ls())\nset_wrkdir<-function(){\n  #function for setting working directory to the right place given the current computer/user\n  if(Sys.getenv(\"USERNAME\")==\"Collin\" || Sys.getenv(\"USERNAME\")==\"collin\" || Sys.getenv(\"USERNAME\")==\"Collin.work\"){ #If it's collin\n    if(Sys.info()[\"nodename\"]==\"DESKTOP-D6QSU8F\"){\n      setwd(\"G:\\\\Repos\\\\phenology-cues\") #desktop\n    }else{\n      setwd(\"C:\\\\Repos\\\\phenology-cues\") #desktop\n    }\n  }else{\n    if(Sys.getenv(\"COMPUTERNAME\")==\"ENT-YANG01\"){\n      setwd(\"C:\\\\Users\\\\louie\\\\Documents\\\\GitHub\\\\phenology-cues\")#desktop\n    }else{\n      setwd(\"C:\\\\Users\\\\louie\\\\Documents\\\\GitHub\\\\phenology-cues\")} #laptop\n  }\n}\n\nptm <-proc.time()\n#########################\n# Simulation parameters #\n#########################\nrunType=\"standard\" ##THIS DETERMINES WHAT KIND OF YEARS WE'RE USING!\ntraits=c(\"day\",\"cutemp\",\"cuprecip\")\n#traits=c(\"day\",\"temp\",\"precip\",\"cutemp\",\"cuprecip\",\"daysq\",\"tempsq\",\"precipsq\",\"cutempsq\",\"cuprecipsq\")\n#unitTestConst is for running the population through a unit test with the same gaussian fitness every year\n#and constant environmental conditions\n#unitTestRand will be for running the populations through a\n#unit test with the same gaussian fitness every year and random envi conditions\n#standard is for running the populations through a set of replications of the first 10 good years of the davis data\nplotExtra=FALSE\nrunName=\"-cumulative\" #string without spaces (for simplicity)\nduration=10\nN=100 #number of individuals\nnumYears=1000 #number of years to simulate\nburnIn=100 #number of years to not plot (to avoid scale issues from broad initial population traits\nbest.temp=30; sd.temp=10; #The optimal temp and the sd for the temp-by-fitness curve (which is gaussian)\nbest.precip=10; sd.precip=30; #The optimal precip and the sd for the precip-by-fitness curve (which is gaussian)\nstart<-list(  #this represents the min and max values used when randomly assigning initial values to the population\n  day=c(1,365),\n  temp=c(0,0),\n  precip=c(0,0),\n  cutemp=c(0,864039),\n  cuprecip=c(0,44189),\n  daysq=c(0,0),\n  tempsq=c(0,0),\n  precipsq=c(0,0),\n  cutempsq=c(0,0),\n  cuprecipsq=c(0,0)\n)\n####THE SDS BELOW NEED TO BE RESCALED FOR FAIRNESS.\nsds<-list( #standard deviations for trait mutations.\n  day=.1,\n  temp=.1,\n  precip=.1,\n  cutemp=.1,\n  cuprecip=.1,\n  daysq=.1,\n  tempsq=.1,\n  precipsq=.1,\n  cutempsq=.1,\n  cuprecipsq=.1)\nmutrate<-list( #probability of each trait mutating in an individual. Mutations are independent of one another\n  day=.01,\n  temp=.01,\n  precip=.01,\n  cutemp=.01,\n  cuprecip=.01,\n  daysq=.01,\n  tempsq=.01,\n  precipsq=.01,\n  cutempsq=.01,\n  cuprecipsq=.01)\n#Now ensure that mutrate is zero for any trait that ISN'T in the trait list\ntemporary<-list( #probability of each trait mutating in an individual. Mutations are independent of one another\n  day=0,\n  temp=0,\n  precip=0,\n  cutemp=0,\n  cuprecip=0,\n  daysq=0,\n  tempsq=0,\n  precipsq=0,\n  cutempsq=0,\n  cuprecipsq=0\n  )\nfor(i.trait in traits){\n  temporary[i.trait]=mutrate[i.trait]\n}\nmutrate=temporary\n\n\n\nyears.index=rep(50:100,length.out=numYears) # This is the list of which year.list data to use for each generation of the model\n#######################################\n# Handling libraries and source files #\n#######################################\n\n#libraries\nlibrary(timeDate)\n# library(Cairo) #I'm not sure if we need this with the plotting removed\nlibrary(zoo)\n#Set appropriate working directory\nset_wrkdir()\n#Load sources file(s)\nsource(\"scripts/windows_subs.R\")\n\n###############################\n# Generate environmental data #\n###############################\n#Based on the value of \"runType\", generate the appropriate type of data.\nif(runType==\"standard\"){\n  years.list=yeargen.davis(best.temp = best.temp,sd.temp = sd.temp,\n                           best.precip = best.precip,sd.precip = sd.precip)\n} else if(runType==\"unitTestConst\"){\n  out=yeargen.const(numYears)\n  years.list=out[[\"years.list\"]]\n  years.index=rep(1,numYears)\n} else if (runType==\"unitTestRand\"){\n  out=yeargen.rand(numYears)\n  years.list=out[[\"years.list\"]]\n}\n#######################\n# initializing population\n#######################\n##intialize a population of N individuals\n# Their min and max values are determined by the start$ parameters\n#Start by setting them all equal to zero. Fill in with the working traits from the traits variable\nb.day=b.temp=b.precip=b.cutemp=b.cuprecip=b.daysq=b.tempsq=b.precipsq=b.cutempsq=b.cuprecipsq=rep(0,N)\nfor(i.trait in traits){\n  if(i.trait==\"day\" | i.trait==\"cutemp\" | i.trait==\"cuprecip\"){\n    curvals=100/runif(n=N,min=start[[i.trait]][1],max=start[[i.trait]][2])\n  }else{\n  curvals=runif(n=N,min=start[[i.trait]][1],max=start[[i.trait]][2])\n  }\n  curname=paste(\"b.\",i.trait,sep=\"\")\n  assign(curname,curvals)\n}\nnewpop<-data.frame(b.day,b.temp,b.precip,b.cutemp,b.cuprecip,b.daysq,b.tempsq,b.precipsq,b.cutempsq,b.cuprecipsq)\npop<-selection(newpop,duration,year=years.list[[1]],N)\n###########################\n## Running the Simulation #\n###########################\npophistory=runSim(startpop=pop,years.list=years.list,\n                  years.ind=years.index,N=N,duration=duration,\n                  sds=sds,mutrate=mutrate,generations=length(years.index[-1]))\n#Note: we've already used year 1 in initiating the pop\n\n#####################\n#Saving our results #\n#####################\n#Set appropriate working directory\nset_wrkdir()\n#We have a \"save data\" script called windows_save.R\nsource(\"scripts/windows_save.R\")\n\n############\n# Plotting #\n############\nset_wrkdir()\nsource(\"scripts/windows_plot.R\")\n\nproc.time()-ptm\n",
    "created" : 1461269560381.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3016939986",
    "id" : "BC967730",
    "lastKnownWriteTime" : 1461273674,
    "last_content_update" : 1461273674999,
    "path" : "~/GitHub/phenology-cues/scripts/windows_main.R",
    "project_path" : "scripts/windows_main.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}