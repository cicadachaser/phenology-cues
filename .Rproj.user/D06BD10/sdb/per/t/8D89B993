{
    "collab_server" : "",
    "contents" : "setwd(\"results\")\nresultsdir=sprintf(\"resRun%s\",runName)\ndir.create(resultsdir,showWarnings = FALSE)\nsetwd(resultsdir)\n\n#Make a matrix of daily fitnesses for all years, cutting out the last day of leap years\nyearFit=matrix(0,nrow=length(years.index),ncol=365)\nfor(i in years.index){\n  curfits=years.list[[i]]$fit.daily\n  if(length(curfits)==366){curfits=curfits[-366]} #to handle leap years, remove last day\n  yearFit[i,]=curfits;\n}\n#Calculate the mean fitness accrued each day\npar(mar=c(5,5,4,3))\nmeanFit=apply(yearFit,2,mean)\nmeanFitSum=NULL\n#calculate the mean fitness for emerging on day x (for all days) [this is using mean fitness accrued per day]\nfor(i.day in 1:365){\n  meanFitSum=c(meanFitSum,sum(rep(meanFit,2)[i.day:(i.day+duration-1)]))\n}\n\nx11(width=9,height=6)\nif(plotExtra==TRUE){\n  for(curgen in c(2:29,seq(31,length(years.index),length=10))){\n    curgen=round(curgen)\n    #arheight=rep(max(meanFit)*1.1,N) #upper bound used for making plots look good\n    emergeDay=pophistory[[curgen]]$emerge\n#     plot(meanFit,type='l',ylim=c(0,max(meanFit)*1.2))\n#     arrows(y0=jitter(arheight,factor=1.5),x0=emergeDay,x1=emergeDay+duration-1,length=.1)\n#     dev.print(pdf,paste(\"dailyfit-run\",runName,\"-gen\",curgen,\"-meanfit.pdf\",sep=\"\"))\n#     plot(meanFitSum,type='l',ylim=c(0,max(meanFitSum)*1.2),\n#          main=paste(\"Mean fitness gained, gen\",curgen),\n#          ylab=\"Fitness gained\",\n#          xlab=\"Julian date\",\n#          cex.lab=1.3,\n#          cex.main=1.3)\n#     arheight=jitter(rep(max(meanFitSum)*1.05,N),factor=.8)\n#     arrows(y0=arheight+.05*max(meanFitSum),x0=emergeDay,y1=arheight,length=.1)\n#     dev.print(pdf,paste(\"dailyfitSum-run\",runName,\"-gen\",curgen,\"-meanfit.pdf\",sep=\"\"))\n    #now calculate the fitSum for THIS YEAR ONLY\n    FitSum=NULL\n    for(i.day in 1:365){\n      FitSum=c(FitSum,sum(c(years.list[[years.index[[curgen]]]]$fit.daily,rep(0,duration))[i.day:(i.day+duration-1)]))\n    }\n    plot(FitSum,type='l',ylim=c(0,max(FitSum)*1.2),\n         main=paste(\"Fitness gained this year, gen\",curgen),\n         ylab=\"Fitness gained\",\n         xlab=\"Julian date\",\n         cex.lab=1.3,\n         cex.main=1.3)\n    arheight=jitter(rep(max(FitSum)*1.05,N),factor=.8)\n    arrows(y0=arheight+.05*max(FitSum),x0=emergeDay,y1=arheight,length=.1)\n    dev.print(pdf,paste(\"dailyfitSum-run\",runName,\"-gen\",curgen,\"-actualfit.pdf\",sep=\"\"))\n    #Now plot each of the coefs by emergence day.\n#     for(coefName in c(\"b.day\",\"b.temp\",\"b.precip\")){\n#       plot(pophistory[[curgen]][,coefName],pophistory[[curgen]][,\"emerge\"],\n#            main=paste(coefName, \"by emergence, gen\", curgen),\n#            ylab=\"emergence\",\n#            xlab=coefName,\n#            cex.lab=1.3,\n#            cex.main=1.3)\n#       dev.print(pdf,paste(\"Coef_x_emerge-\",coefName,\"-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n#     }\n#     coefList=c(\"b.day\",\"b.temp\",\"b.precip\")\n#     for(i in 1:3){\n#       coef1=coefList[i]\n#       coef2=coefList[(i %% 3)+1]\n#       curpop=pophistory[[curgen]]\n#       plot(x=curpop[,coef1],y=curpop[,coef2],type='n',\n#            main=paste(coef1, \"by\", coef2, \"gen\", curgen),\n#            ylab=coef2,\n#            xlab=coef1,\n#            cex.lab=1.3,\n#            cex.main=1.3)\n#       points(x=(curpop[curpop[,\"emerge\"]>364,coef1]),y=(curpop[curpop[,\"emerge\"]>364,coef2]),pch=3,col='blue')\n#       points(x=(curpop[curpop[,\"emerge\"]<365,coef1]),y=(curpop[curpop[,\"emerge\"]<365,coef2]),pch=1,col='black')\n#       dev.print(pdf,paste(\"Coef_x_coef-\",coef1,\"x\",coef2,\"-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n#     }\n  }\n}\n#Calculating changes in mean fitness through time\nmaxfit=maxActfit=meanfit=emerge.ideal=rep(0,length(years.index))\nemerge=matrix(0,ncol=N,nrow=length(years.index))\nfor(curgen in 1:length(years.index)){\n  meanfit[curgen]=mean(pophistory[[curgen]]$Wi)\n  maxActfit[curgen]=max(pophistory[[curgen]]$Wi)\n  cur.fitness=years.list[[years.index[curgen]]]$fit.daily\n  cur.fitness.durated=rollapply(c(cur.fitness,rep(0,duration-1)),duration,by=1,sum)\n  maxfit[curgen]=max(cur.fitness.durated)\n  emerge[curgen,]=pophistory[[curgen]]$emerge\n  emerge.ideal[curgen]=min(which(cur.fitness.durated==maxfit[curgen]))\n}\n#plot emergence times\nmaxCount=100 #maximum number of years to count\ngenerations=1:length(years.index)\nviewGens=generations\nif(length(generations)>maxCount){\n  viewGens=floor(seq(min(generations),max(generations),length.out=maxCount))\n}\n#Plot when organisms emerge\nmatplot(jitter(viewGens),emerge[viewGens,],type='p',pch=1,col='black',\n     main=paste(\"Emergence days\"),\n     xlab=\"Generation\",\n     ylab=\"Emergence day\",\n     cex.lab=1.4,cex.main=1.4)\n#add `optimal emergence day' - note this is a vast oversimplification\npoints(viewGens,emerge.ideal[viewGens],col=\"red\",pch=4,lwd=2)\ndev.print(pdf,paste(\"emerge-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n\n#plot mean fitness through time, showing max possible fitness\nplot(maxfit,type='l',col='red',\n     main=paste(\"Mean fitness through time for run\",runName),\n     xlab=\"generation\",\n     ylab=\"Raw mean fitness\",\n     sub=\"red is maximum possible\",\n     ylim=c(0,max(maxfit))\n)\npoints(1:length(meanfit),meanfit,type='l')\ndev.print(pdf,paste(\"meanfit-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n#plot mean fitness through time, normalized by max fitness\nplot(meanfit/maxfit,type='l',col='black',\n     main=paste(\"Mean fitness / max possible\",runName),\n     ylab=\"normalized mean fitness\",\n     xlab=\"generation\",\n     sub=\"red is maximum possible\",\n     ylim=c(0,1)\n)\nabline(h=1,col='red')\ndev.print(pdf,paste(\"meanfitNorm-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n#plot max potential fitness and max actual fitness through time\n#  ie the fittest individual of each generatoin\nplot(maxfit,type='l',col='red',\n     main=paste(\"Max achieved fitness through time for run\",runName),\n     xlab=\"generation\",\n     ylab=\"Raw max fitness\",\n     sub=\"red is maximum possible\",\n     ylim=c(0,max(maxfit))\n)\npoints(1:length(maxActfit),maxActfit,type='l')\ndev.print(pdf,paste(\"maxfit-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n\n#Looking at coef changes through time\n#  doing two things. exp.eff is the \"expected\" effect size by muliplying the coefficient of each individual by the mean environmental conditions for that generation\n#  The act.eff is the actual effect size, found by multiplying the coefficient of each indiv by the environmental conditions of their day of emergence.\n#    Those plots use crosses to represent individuals who didn't emerge until the final day, and circles for those that emerged on a normal day (ie their cue\nexp.eff=meanTraitEff(years.index,years.list,pophistory,N)\nact.eff=actTraitEff(years.index,years.list,pophistory,N)\nact.vals=actTraitVals(pophistory,numYears,N)\n\nx11(width=9,height=6)\npar(mar=c(5,5,4,4))\nif(plotExtra==TRUE){\n  traitplot(indivs=act.vals,trait=\"b.day\")\n  dev.print(pdf,paste(\"coefVals-day-run\",runName,\".pdf\",sep=\"\"))\n  traitplot(indivs=act.vals,trait=\"b.cutemp\")\n  dev.print(pdf,paste(\"coefVals-temp-run\",runName,\".pdf\",sep=\"\"))\n  traitplot(indivs=act.vals,trait=\"b.cuprecip\")\n  dev.print(pdf,paste(\"coefVals-precip-run\",runName,\".pdf\",sep=\"\"))\n\n  traiteffplot(indivs=exp.eff,trait=\"b.day\")\n  dev.print(pdf,paste(\"coefEffects-day-expected-run\",runName,\".pdf\",sep=\"\"))\n  traiteffplot(indivs=exp.eff,trait=\"b.cutemp\")\n  dev.print(pdf,paste(\"coefEffects-temp-expected-run\",runName,\".pdf\",sep=\"\"))\n  traiteffplot(indivs=exp.eff,trait=\"b.cuprecip\")\n  dev.print(pdf,paste(\"coefEffects-precip-expected-run\",runName,\".pdf\",sep=\"\"))\n\n  emergePlot(indivs=act.eff,trait=\"b.day\")\n  dev.print(pdf,paste(\"coefEffects-day-actual-run\",runName,\".pdf\",sep=\"\"))\n  emergePlot(indivs=act.eff,trait=\"b.cutemp\")\n  dev.print(pdf,paste(\"coefEffects-temp-actual-run\",runName,\".pdf\",sep=\"\"))\n  emergePlot(indivs=act.eff,trait=\"b.cuprecip\")\n  dev.print(pdf,paste(\"coefEffects-precip-actual-run\",runName,\".pdf\",sep=\"\"))\n}\n#Plot it all in one\nx11()\npar(mfrow=c(3,1))\ntraiteffplot(indivs=exp.eff,trait=\"b.day\")\ntraiteffplot(indivs=exp.eff,trait=\"b.cutemp\")\ntraiteffplot(indivs=exp.eff,trait=\"b.cuprecip\")\ndev.print(pdf,paste(\"coefEffects-all-expected-run\",runName,\".pdf\",sep=\"\"))\n\ntraiteffplot(indivs=exp.eff[exp.eff[,\"gen\"]>burnIn,],trait=\"b.day\")\ntraiteffplot(indivs=exp.eff[exp.eff[,\"gen\"]>burnIn,],trait=\"b.cutemp\")\ntraiteffplot(indivs=exp.eff[exp.eff[,\"gen\"]>burnIn,],trait=\"b.cuprecip\")\ndev.print(pdf,paste(\"coefEffects-all-expected-postburn-run\",runName,\".pdf\",sep=\"\"))\n\nemergePlot(indivs=act.eff,trait=\"b.day\")\nemergePlot(indivs=act.eff,trait=\"b.cutemp\")\nemergePlot(indivs=act.eff,trait=\"b.cuprecip\")\ndev.print(pdf,paste(\"coefEffects-all-actual-run\",runName,\".pdf\",sep=\"\"))\n\nemergePlot(indivs=act.eff[act.eff[,\"gen\"]>burnIn,],trait=\"b.day\")\nemergePlot(indivs=act.eff[act.eff[,\"gen\"]>burnIn,],trait=\"b.cutemp\")\nemergePlot(indivs=act.eff[act.eff[,\"gen\"]>burnIn,],trait=\"b.cuprecip\")\ndev.print(pdf,paste(\"coefEffects-all-actual-postburn-run\",runName,\".pdf\",sep=\"\"))\n\ntraitplot(indivs=act.vals,trait=\"b.day\")\ntraitplot(indivs=act.vals,trait=\"b.cutemp\")\ntraitplot(indivs=act.vals,trait=\"b.cuprecip\")\ndev.print(pdf,paste(\"coefVals-all-run\",runName,\".pdf\",sep=\"\"))\n\ntraitplot(indivs=act.vals[act.vals[,\"gen\"]>burnIn,],trait=\"b.day\")\ntraitplot(indivs=act.vals[act.vals[,\"gen\"]>burnIn,],trait=\"b.cutemp\")\ntraitplot(indivs=act.vals[act.vals[,\"gen\"]>burnIn,],trait=\"b.cuprecip\")\ndev.print(pdf,paste(\"coefVals-all-postburn-run\",runName,\".pdf\",sep=\"\"))\n\n",
    "created" : 1461270514298.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4198366793",
    "id" : "8D89B993",
    "lastKnownWriteTime" : 1461272748,
    "last_content_update" : 1461272748975,
    "path" : "~/GitHub/phenology-cues/scripts/windows_plot.R",
    "project_path" : "scripts/windows_plot.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}