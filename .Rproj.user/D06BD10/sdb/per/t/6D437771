{
    "collab_server" : "",
    "contents" : "require(vegan)\nrequire(scatterplot3d)\nsetwd(\"results\")\nresultsdir=sprintf(\"%s/resRun%s\",runsname,runName)\nsetwd(resultsdir)\n\n#Make a matrix of daily fitnesses for all years, cutting out the last day of leap years\nyearFit=matrix(0,nrow=length(years.index),ncol=365)\ncount=1\nfor(i in years.index){\n  curfits=years.list[[i]]$fit.daily\n  if(length(curfits)==366){curfits=curfits[-366]} #to handle leap years, remove last day\n  yearFit[count,]=curfits;\n  count=count+1\n}\n#Calculate the mean fitness accrued each day\npar(mar=c(5,5,4,3))\nmeanFit=apply(yearFit,2,mean)\n#calculate the mean fitness for emerging on day x (for all days) [this is using mean fitness accrued per day]\nmeanFitSum=rollapply(c(meanFit,rep(0,duration-1)),duration,by=1,sum)\nfor(i.day in 1:365){\n  meanFitSum=c(meanFitSum,sum(rep(meanFit)[i.day:(i.day+duration-1)]))\n}\n\nx11(width=9,height=6)\nif(plotExtra==TRUE){\n  for(curgen in c(1:20,seq(21,length(years.index),length=10))){\n    curgen=round(curgen)\n    #arheight=rep(max(meanFit)*1.1,N) #upper bound used for making plots look good\n    emergeDay=pophistory[[curgen]]$emerge\n    #     plot(meanFit,type='l',ylim=c(0,max(meanFit)*1.2))\n    #     arrows(y0=jitter(arheight,factor=1.5),x0=emergeDay,x1=emergeDay+duration-1,length=.1)\n    #     dev.print(pdf,paste(\"dailyfit-run\",runName,\"-gen\",curgen,\"-meanfit.pdf\",sep=\"\"))\n    #     plot(meanFitSum,type='l',ylim=c(0,max(meanFitSum)*1.2),\n    #          main=paste(\"Mean fitness gained, gen\",curgen),\n    #          ylab=\"Fitness gained\",\n    #          xlab=\"Julian date\",\n    #          cex.lab=1.3,\n    #          cex.main=1.3)\n    #     arheight=jitter(rep(max(meanFitSum)*1.05,N),factor=.8)\n    #     arrows(y0=arheight+.05*max(meanFitSum),x0=emergeDay,y1=arheight,length=.1)\n    #     dev.print(pdf,paste(\"dailyfitSum-run\",runName,\"-gen\",curgen,\"-meanfit.pdf\",sep=\"\"))\n    #now calculate the fitSum for THIS YEAR ONLY\n    FitSum=rollapply(c(years.list[[years.index[[curgen]]]]$fit.daily,rep(0,duration-1)),duration,by=1,sum)\n    plot(FitSum,type='l',ylim=c(0,max(FitSum)*1.2),\n         main=paste(\"Fitness gained this year, gen\",curgen),\n         ylab=\"Fitness gained\",\n         xlab=\"Julian date\",\n         cex.lab=1.3,\n         cex.main=1.3)\n    arheight=jitter(rep(max(FitSum)*1.05,N),factor=.8)\n    arrows(y0=arheight+.05*max(FitSum),x0=emergeDay,y1=arheight,length=.1)\n    points(meanFitSum,type='l',lty=3)\n    dev.print(pdf,paste(\"dailyfitSum-run\",runName,\"-gen\",curgen,\"-actualfit.pdf\",sep=\"\"))\n    #Now plot each of the coefs by emergence day.\n    #     for(coefName in c(\"b.day\",\"b.temp\",\"b.precip\")){\n    #       plot(pophistory[[curgen]][,coefName],pophistory[[curgen]][,\"emerge\"],\n    #            main=paste(coefName, \"by emergence, gen\", curgen),\n    #            ylab=\"emergence\",\n    #            xlab=coefName,\n    #            cex.lab=1.3,\n    #            cex.main=1.3)\n    #       dev.print(pdf,paste(\"Coef_x_emerge-\",coefName,\"-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n    #     }\n    #     coefList=c(\"b.day\",\"b.temp\",\"b.precip\")\n    #     for(i in 1:3){\n    #       coef1=coefList[i]\n    #       coef2=coefList[(i %% 3)+1]\n    #       curpop=pophistory[[curgen]]\n    #       plot(x=curpop[,coef1],y=curpop[,coef2],type='n',\n    #            main=paste(coef1, \"by\", coef2, \"gen\", curgen),\n    #            ylab=coef2,\n    #            xlab=coef1,\n    #            cex.lab=1.3,\n    #            cex.main=1.3)\n    #       points(x=(curpop[curpop[,\"emerge\"]>364,coef1]),y=(curpop[curpop[,\"emerge\"]>364,coef2]),pch=3,col='blue')\n    #       points(x=(curpop[curpop[,\"emerge\"]<365,coef1]),y=(curpop[curpop[,\"emerge\"]<365,coef2]),pch=1,col='black')\n    #       dev.print(pdf,paste(\"Coef_x_coef-\",coef1,\"x\",coef2,\"-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n    #     }\n  }\n}\n#Calculating changes in mean fitness through time\nmaxfit=maxActfit=meanfit=emerge.ideal=rep(0,length(years.index))\nemerge=matrix(0,ncol=N,nrow=length(years.index))\nfor(curgen in 1:numYears){\n  meanfit[curgen]=mean(pophistory[[curgen]]$Wi)\n  maxActfit[curgen]=max(pophistory[[curgen]]$Wi)\n  cur.fitness=years.list[[years.index[curgen]]]$fit.daily\n  cur.fitness.durated=rollapply(c(cur.fitness,rep(0,duration-1)),duration,by=1,sum)\n  maxfit[curgen]=max(cur.fitness.durated)\n  emerge[curgen,]=pophistory[[curgen]]$emerge\n  emerge.ideal[curgen]=min(which(cur.fitness.durated==maxfit[curgen]))\n}\n#plot emergence times\nmaxCount=100 #maximum number of years to count\ngenerations=1:length(years.index)\nviewGens=generations\nif(length(generations)>maxCount){\n  viewGens=floor(seq(min(generations),max(generations),length.out=maxCount))\n}\n#Plot when organisms emerge\nmatplot(jitter(viewGens),emerge[viewGens,],type='p',pch=1,col='black',\n        main=paste(\"Emergence days\"),\n        xlab=\"Generation\",\n        ylab=\"Emergence day\",\n        cex.lab=1.4,cex.main=1.4)\n#add `optimal emergence day' - note this is a vast oversimplification\npoints(viewGens,emerge.ideal[viewGens],col=\"red\",pch=4,lwd=2)\ndev.print(pdf,paste(\"emerge-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n\n#plot mean fitness through time, showing max possible fitness\nplot(maxfit,type='l',col='red',\n     main=paste(\"Mean fitness through time for run\",runName),\n     xlab=\"generation\",\n     ylab=\"Raw mean fitness\",\n     sub=\"red is maximum possible\",\n     ylim=c(0,max(maxfit))\n)\npoints(1:length(meanfit),meanfit,type='l')\ndev.print(pdf,paste(\"meanfit-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n#plot mean fitness through time, normalized by max fitness\nplot(meanfit/maxfit,type='l',col='black',\n     main=paste(\"Mean fitness / max possible\",runName),\n     ylab=\"normalized mean fitness\",\n     xlab=\"generation\",\n     sub=\"red is maximum possible\",\n     ylim=c(0,1)\n)\nabline(h=1,col='red')\ndev.print(pdf,paste(\"meanfitNorm-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n#plot max potential fitness and max actual fitness through time\n#  ie the fittest individual of each generatoin\nplot(maxfit,type='l',col='red',\n     main=paste(\"Max achieved fitness through time for run\",runName),\n     xlab=\"generation\",\n     ylab=\"Raw max fitness\",\n     sub=\"red is maximum possible\",\n     ylim=c(0,max(maxfit))\n)\npoints(1:length(maxActfit),maxActfit,type='l')\ndev.print(pdf,paste(\"maxfit-run\",runName,\"-gen\",curgen,\".pdf\",sep=\"\"))\n\n#Looking at coef changes through time\n#  The act.eff is the actual effect size, found by multiplying the coefficient of each indiv by the environmental conditions of their day of emergence.\n#    Those plots use crosses to represent individuals who didn't emerge until the final day, and circles for those that emerged on a normal day (ie their cue\nact.eff=actTraitEff(years.index,years.list,pophistory,N,traits)\nact.vals=actTraitVals(pophistory,numYears,N)\ntraitslist=sprintf(\"b.%s\",traits)\n\n#x11(width=9,height=6)\npar(mar=c(5,5,4,4))\n#Plot it all in one\npar(mfrow=c(3,1))\nind=1\nwhile(ind<=length(traitslist)){\n  plotlist=ind:min(ind+2,length(traitslist))\n  for(cur.trait in plotlist){\n    emergePlot(indivs=act.eff,trait=traitslist[cur.trait])\n  }\n  dev.print(pdf,paste(\"coefEffects-\",paste(traitslist[plotlist],collapse='-'),\"-actual-run\",runName,\".pdf\",sep=\"\"))\n  for(cur.trait in plotlist){\n    emergePlotYlim(indivs=act.eff,trait=traitslist[cur.trait],ylim=c(0,100))\n  }\n  dev.print(pdf,paste(\"coefEffects-\",paste(traitslist[plotlist],collapse='-'),\"-actual-run-ylim\",runName,\".pdf\",sep=\"\"))\n  for(cur.trait in plotlist){\n  emergePlot(indivs=act.eff[act.eff[,\"gen\"]>burnIn,],trait=traitslist[cur.trait])\n  }\n  dev.print(pdf,paste(\"coefEffects-\",paste(traitslist[plotlist],collapse='-'),\"-actual-postburn-run\",runName,\".pdf\",sep=\"\"))\n  for(cur.trait in plotlist){\n  traitplot(indivs=act.vals,trait=traitslist[cur.trait])\n  }\n  dev.print(pdf,paste(\"coefVals-\",paste(traitslist[plotlist],collapse='-'),\"-run\",runName,\".pdf\",sep=\"\"))\n  for(cur.trait in plotlist){\n  traitplot(indivs=act.vals[act.vals[,\"gen\"]>burnIn,],trait=traitslist[cur.trait])\n    }\n  dev.print(pdf,paste(\"coefVals-\",paste(traitslist[plotlist],collapse='-'),\"-postburn-run\",runName,\".pdf\",sep=\"\"))\n  ind=max(plotlist)+1\n}\n#Plot phenotypes through time\n\npar(mfrow=c(1,1))\npop.temp=do.call(rbind.data.frame,pophistory[c(seq(2,length(years.index),by=100))])\ntraitmins=NULL\nfor(i.trait in traitslist){traitmins=c(traitmins,min(pop.temp[,i.trait]))}\ntraitmaxs=NULL\nfor(i.trait in traitslist){traitmaxs=c(traitmaxs,max(pop.temp[,i.trait]))}\n#x11(width=9,height=6)\nif(plotPheno==TRUE){\n  traitslist=sprintf(\"b.%s\",traits)\n  for(curgen in c(1,seq(2,numYears,length=20))){\n    curgen=round(curgen)\n    cur.pop=pophistory[[curgen]]\n    if(length(traitslist)<4){ #can just do 3d plot\n      scatterplot3d(jitter(as.matrix(cur.pop[,traitslist])),type='h',\n                    xlim=c(traitmins[1],traitmaxs[1]),\n                    ylim=c(traitmins[2],traitmaxs[2]),\n                    zlim=c(traitmins[3],traitmaxs[3]))\n      dev.print(pdf,sprintf(\"pheno3d-gen%06d-run%s.pdf\",curgen,runName))\n    }else{\n      cur.ndms=metaMDS(cur.pop[,traitslist],k=2,trymax=100,autotransform = TRUE)\n      plot(cur.ndms,main=paste(\"NDMS for generation\", curgen))\n      dev.print(pdf,sprintf(\"pheno3d-gen%06d-run%s.pdf\",curgen,runName))\n    }\n  }\n}\n\n\n\n# a few new plotting ideas ------------------------------------------------\n\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(plot3D)\nlibrary(plot3Drgl)\n\ncoeff.eff.sum<-aggregate(cbind(b.day,b.cutemp,b.cuprecip)~gen,data=act.eff,mean)\n\n#to look at a smaller subset of the data, here up to 50 generations\n#coeff.eff.sum<-coeff.eff.sum[coeff.eff.sum$gen<50,]\n\ncoeff.eff.sum.melt<- melt(coeff.eff.sum, id.var=\"gen\")\n\nggplot(coeff.eff.sum.melt,aes(x=gen,y=value,fill=variable))+geom_smooth()\n\nggplot(coeff.eff.sum.melt,aes(x=gen,y=value,color=variable))+geom_line()+geom_point()+geom_smooth()\n\n#more 3D scatterplotting\n\nx<-coeff.eff.sum$b.day\ny<-coeff.eff.sum$b.cutemp\nz<-coeff.eff.sum$b.cuprecip\n\nfit<-lm(z~x+y)\ngrid.lines = 26\nx.pred<-seq(min(x),max(x),length.out=grid.lines)\ny.pred<-seq(min(y),max(y),length.out=grid.lines)\nxy<-expand.grid(x=x.pred,y=y.pred)\nz.pred<-matrix(predict(fit,newdata = xy),nrow=grid.lines,ncol=grid.lines)\nfitpoints <- predict(fit)\n\nscatter3D(x,y,z,colvar=coeff.eff.sum$gen,type = \"h\", ticktype = \"detailed\", pch = 19,xlab=\"b.day.eff\", ylab=\"b.cutemp.eff\", zlab=\"b.cuprecip.eff\", clab=\"gen\",surf = list(x = x.pred, y = y.pred, z = z.pred,facets = NA, fit = fitpoints))\n\nplotrgl()\n",
    "created" : 1469058266009.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "923041009",
    "id" : "6D437771",
    "lastKnownWriteTime" : 1469146416,
    "last_content_update" : 1469146416527,
    "path" : "~/GitHub/phenology-cues/scripts/windows_plot.R",
    "project_path" : "scripts/windows_plot.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}