<<<<<<< HEAD
barplot(rev(ymean)/yscaling,ylim=c(0,max(y/yscaling)*1.1),
main='(B) Undirected, Inf Dispersal',ylab='',
names.arg=c('64 field','16 field','4 field','1 field'),cex.names=1.5,cex.lab=2,cex.main=1.8,cex.axis=1.8)
points(jitter(x,factor=.3),y/yscaling,pch=1)
x=(c(rep(4.3,30),rep(3.1,30),rep(1.9,30),rep(.7,30)))
y=c(fields1.dirweev,fields4.dirweev,fields16.dirweev,fields64.dirweev)
ymean=c(mean(fields1.dirweev),mean(fields4.dirweev),mean(fields16.dirweev),mean(fields64.dirweev))
barplot(rev(ymean)/yscaling,ylim=c(0,max(y/yscaling)*1.1),
main=' (C) Directed, 100m Dispersal',ylab='',
names.arg=c('64 field','16 field','4 field','1 field'),cex.names=1.5,cex.lab=2,cex.main=1.8,cex.axis=1.8)
points(jitter(x,factor=.3),y/yscaling,pch=1)
x=(c(rep(4.3,30),rep(3.1,30),rep(1.9,30),rep(.7,30)))
y=c(fields1.undirweev,fields4.undirweev,fields16.undirweev,fields64.undirweev)
ymean=c(mean(fields1.undirweev),mean(fields4.undirweev),mean(fields16.undirweev),mean(fields64.undirweev))
barplot(rev(ymean)/yscaling,ylim=c(0,max(y/yscaling)*1.1),
main='(D) Undirected, 100m Dispersal', ylab='',
names.arg=c('64 field','16 field','4 field','1 field'),cex.names=1.5,cex.lab=1.5,cex.main=1.8,cex.axis=1.8)
points(jitter(x,factor=.3),y/yscaling,pch=1)
mtext('Weevil abundance (in thousands)',side=2,outer=TRUE,cex=2)
mtext('Aggregation level',side=1,outer=TRUE,cex=2)
#####
##Calculating effect size
#base=mean(fields64.dirweev.rad)
#new=mean(fields64.undirweev)
#new/base
#mean(fields64.dirweev.rad)
vNum=1
###
#Standard Fields!
fields64.undirweev <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fieldsStand_weevilsStandV%s_dir/fieldsStand_weevilsStandV%s_%s_undirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields64.undirweev<-c(fields64.undirweev,sum(mat[209:312,1:104]))
}
fields64.dirweev <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fieldsStand_weevilsStandV%s_dir/fieldsStand_weevilsStandV%s_%s_dirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields64.dirweev<-c(fields64.dirweev,sum(mat[209:312,1:104]))
}
fields64.undirweev.rad <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fieldsStand_weevilsRadV%s_dir/fieldsStand_weevilsRadV%s_%s_undirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields64.undirweev.rad<-c(fields64.undirweev.rad,sum(mat[209:312,1:104]))
}
fields64.dirweev.rad <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fieldsStand_weevilsRadV%s_dir/fieldsStand_weevilsRadV%s_%s_dirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields64.dirweev.rad<-c(fields64.dirweev.rad,sum(mat[209:312,1:104]))
}
###
#Grouped fields!
fields16.undirweev <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fieldsGroupedFields_weevilsStandV%s_dir/fieldsGroupedFields_weevilsStandV%s_%s_undirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields16.undirweev<-c(fields16.undirweev,sum(mat[209:312,1:104]))
}
fields16.dirweev <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fieldsGroupedFields_weevilsStandV%s_dir/fieldsGroupedFields_weevilsStandV%s_%s_dirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields16.dirweev<-c(fields16.dirweev,sum(mat[209:312,1:104]))
}
fields16.undirweev.rad <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fieldsGroupedFields_weevilsRadV%s_dir/fieldsGroupedFields_weevilsRadV%s_%s_undirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields16.undirweev.rad<-c(fields16.undirweev.rad,sum(mat[209:312,1:104]))
}
fields16.dirweev.rad <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fieldsGroupedFields_weevilsRadV%s_dir/fieldsGroupedFields_weevilsRadV%s_%s_dirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields16.dirweev.rad<-c(fields16.dirweev.rad,sum(mat[209:312,1:104]))
}
###
#4 fields!
fields4.undirweev <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fields4Farms_weevilsStandV%s_dir/fields4Farms_weevilsStandV%s_%s_undirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields4.undirweev<-c(fields4.undirweev,sum(mat[209:312,1:104]))
}
fields4.dirweev <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fields4Farms_weevilsStandV%s_dir/fields4Farms_weevilsStandV%s_%s_dirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields4.dirweev<-c(fields4.dirweev,sum(mat[209:312,1:104]))
}
fields4.undirweev.rad <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fields4Farms_weevilsRadV%s_dir/fields4Farms_weevilsRadV%s_%s_undirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields4.undirweev.rad<-c(fields4.undirweev.rad,sum(mat[209:312,1:104]))
}
fields4.dirweev.rad <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fields4Farms_weevilsRadV%s_dir/fields4Farms_weevilsRadV%s_%s_dirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields4.dirweev.rad<-c(fields4.dirweev.rad,sum(mat[209:312,1:104]))
}
###
#1 field!
fields1.undirweev <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fields1Farm_weevilsStandV%s_dir/fields1Farm_weevilsStandV%s_%s_undirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields1.undirweev<-c(fields1.undirweev,sum(mat[209:312,1:104]))
}
fields1.dirweev <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fields1Farm_weevilsStandV%s_dir/fields1Farm_weevilsStandV%s_%s_dirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields1.dirweev<-c(fields1.dirweev,sum(mat[209:312,1:104]))
}
fields1.undirweev.rad <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fields1Farm_weevilsRadV%s_dir/fields1Farm_weevilsRadV%s_%s_undirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields1.undirweev.rad<-c(fields1.undirweev.rad,sum(mat[209:312,1:104]))
}
fields1.dirweev.rad <- NULL
for(i.run in 1:30){
mat=data.matrix(read.csv(sprintf("C:/Users/Collin/Dropbox/Grad school/research projects/weevil_paper/results/WorkingDir/fields1Farm_weevilsRadV%s_dir/fields1Farm_weevilsRadV%s_%s_dirWeevils.csv",vNum,vNum,i.run),
header=FALSE))
fields1.dirweev.rad<-c(fields1.dirweev.rad,sum(mat[209:312,1:104]))
}
#################################
getOption("scipen")
opt <- options("scipen" = 20)
getOption("scipen")
x11()
par(mfrow=c(2,2),mar=c(6,6,4,4),oma=c(2,3,0,0))
yscaling=1000
x=(c(rep(4.3,30),rep(3.1,30),rep(1.9,30),rep(.7,30)))
y=c(fields1.dirweev.rad,fields4.dirweev.rad,fields16.dirweev.rad,fields64.dirweev.rad)
ymean=c(mean(fields1.dirweev.rad),mean(fields4.dirweev.rad),mean(fields16.dirweev.rad),mean(fields64.dirweev.rad))
barplot(rev(ymean)/yscaling,ylim=c(0,max(y/yscaling)*1.1),
main='(A) Directed, unlimited dispersal', ylab='',
names.arg=c('64 field','16 field','4 field','1 field'),cex.names=1.5,cex.lab=2,cex.main=1.8,cex.axis=1.8)
points(jitter(x,factor=.2),y/yscaling,pch=1)
x=(c(rep(4.3,30),rep(3.1,30),rep(1.9,30),rep(.7,30)))
y=c(fields1.undirweev.rad,fields4.undirweev.rad,fields16.undirweev.rad,fields64.undirweev.rad)
ymean=c(mean(fields1.undirweev.rad),mean(fields4.undirweev.rad),mean(fields16.undirweev.rad),mean(fields64.undirweev.rad))
barplot(rev(ymean)/yscaling,ylim=c(0,max(y/yscaling)*1.1),
main='(B) Undirected, unlimited dispersal',ylab='',
names.arg=c('64 field','16 field','4 field','1 field'),cex.names=1.5,cex.lab=2,cex.main=1.8,cex.axis=1.8)
points(jitter(x,factor=.3),y/yscaling,pch=1)
x=(c(rep(4.3,30),rep(3.1,30),rep(1.9,30),rep(.7,30)))
y=c(fields1.dirweev,fields4.dirweev,fields16.dirweev,fields64.dirweev)
ymean=c(mean(fields1.dirweev),mean(fields4.dirweev),mean(fields16.dirweev),mean(fields64.dirweev))
barplot(rev(ymean)/yscaling,ylim=c(0,max(y/yscaling)*1.1),
main=' (C) Directed, limited dispersal',ylab='',
names.arg=c('64 field','16 field','4 field','1 field'),cex.names=1.5,cex.lab=2,cex.main=1.8,cex.axis=1.8)
points(jitter(x,factor=.3),y/yscaling,pch=1)
x=(c(rep(4.3,30),rep(3.1,30),rep(1.9,30),rep(.7,30)))
y=c(fields1.undirweev,fields4.undirweev,fields16.undirweev,fields64.undirweev)
ymean=c(mean(fields1.undirweev),mean(fields4.undirweev),mean(fields16.undirweev),mean(fields64.undirweev))
barplot(rev(ymean)/yscaling,ylim=c(0,max(y/yscaling)*1.1),
main='(D) Undirected, limited dispersal', ylab='',
names.arg=c('64 field','16 field','4 field','1 field'),cex.names=1.5,cex.lab=1.5,cex.main=1.8,cex.axis=1.8)
points(jitter(x,factor=.3),y/yscaling,pch=1)
mtext('Herbivore abundance (in thousands)',side=2,outer=TRUE,cex=2)
mtext('Aggregation level',side=1,outer=TRUE,cex=2)
temp=runif(50)*10
quantile(temp,probs=c(.25,.50,.75)
)
set.seed(3)
x <- seq(0,2*pi,0.1)
z <- sin(x)
y <- z + rnorm(mean=0, sd=0.5*sd(z), n=length(x))
d <- cbind.data.frame(x,y,z)
plot(x,y)
B <- bs(x, degree=3, intercept=TRUE, Boundary.knots=c(0, 6.2), knots=c(1.55, 3.10, 4.65))
require(gam)
B <- bs(x, degree=3, intercept=TRUE, Boundary.knots=c(0, 6.2), knots=c(1.55, 3.10, 4.65))
B
names(B)
model=lm(y~0+B)
plot(model)
model
smoother = lm$fitted
smoother = lm$fitted
smoother = model$fitted
plot(smoother)
plot(smoother,type='l')
model$coefficients%*%B
model$coefficients
B
B[1]
B[[1]]
attr(B)
require(mgcv)
load("C:/Users/Collin/Downloads/Patty workspace.txt")
cow="moo"
save.image("~/workspace.RData")
load("~/workspace.RData")
ls()
load("C:/Users/Collin/Downloads/Patty workspace.RData")
#Run parameters
runFile="quicktest.R"
require(doSNOW); require(parallel); require(doParallel)
nClust=detectCores(all.tests=FALSE,logical=TRUE)
c1<-makeCluster(nClust-1)
registerDoParallel(c1)
#Getting basic information
source(paste("scripts/var_exper/runfiles/",runFile,sep = "")) #call the runFile which as all the variables defined
startTime=proc.time()
#Creating combinations of year and day variations using matrix trick
yrstdmat=matrix(seq(0,yearstdMax,length=numpts),ncol=numpts,nrow=numpts,byrow = TRUE)
daystdmat=matrix(seq(0,daystdMax,length=numpts),ncol=numpts,nrow=numpts,byrow = FALSE)
yearstds=yrstdmat[1:(numpts^2)]
=======
testbrute=brute$yearlistlist[[1]][[1]]
compare=testopt[,"temp"]-testbrute[,"temp"]
sum(compare^2)
compare
identical(testopt,testbrute)
dim(testopt-testbrute)
dim(testopt)
dim(testbrute)
names(testopt)
names(testbrute)
head(yearlistlist[[1]]
_
head(yearlistlist[[1]])
setwd("G:/Repos/phenology-cues/results/fig1/compare1-10yr")
load("fig1dat-versioncompare1-10yr.Rdata",envir=brute<-new.env())
head(yearlistlist[[1]]_
head(yearlistlist[[1]])
head(yearslistlist[[1]])
head(brute$yearlistlist[[1]])
head(brute$yearlistlist[[1]])
head(brute$yearlistlist[[1]][1])
head(brute$yearlistlist[[1]][[1]])
years.list=brute$yearlistlist[[i.stdev]]
i.stdev=1
years.list=brute$yearlistlist[[i.stdev]]
for(i.ylist in 1:length(years.list)){
years.list[[i.ylist]] = cbind(years.list[[i.ylist]],
fit.tot=c(rollapply(c(years.list[[i.ylist]]$fit.daily,rep(0,duration-1)),duration,by=1,sum)))
}
duration=10
years.list=brute$yearlistlist[[i.stdev]]
for(i.ylist in 1:length(years.list)){
years.list[[i.ylist]] = cbind(years.list[[i.ylist]],
fit.tot=c(rollapply(c(years.list[[i.ylist]]$fit.daily,rep(0,duration-1)),duration,by=1,sum)))
}
head(years.list[[1]])
set_wrkdir()
source('G:/Repos/phenology-cues/scripts/var_exper/runfiles/opt1-10yr_comp1listlist.R')
source('G:/Repos/phenology-cues/scripts/var_exper/runfiles/opt1-10yr_comp1listlist.R')
source('G:/Repos/phenology-cues/scripts/var_exper/runfiles/opt1-10yr_comp1listlist.R')
runFile="opt1-10yr-comp1listlist.R"
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
}
}
set_wrkdir()
source("scripts/var_exper/fig1_calculator_opt_comp.R")
tempPath=getwd()
set_wrkdir()
file.copy(from=paste("scripts/var_exper/runfiles/",runFile,sep = ""),
to=paste(tempPath,"/pars-version-",runFile,sep="")
)
runFile="opt1-10yr_comp1listlist.R"
>>>>>>> 8f45bd1e6a5c8f2a0cfce45534c0605b131e8b45
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
}
}
set_wrkdir()
<<<<<<< HEAD
require(doSNOW); require(parallel); require(doParallel)
nClust=detectCores(all.tests=FALSE,logical=TRUE)
c1<-makeCluster(nClust-1)
registerDoParallel(c1)
#Getting basic information
source(paste("scripts/var_exper/runfiles/",runFile,sep = "")) #call the runFile which as all the variables defined
startTime=proc.time()
#Creating combinations of year and day variations using matrix trick
yrstdmat=matrix(seq(0,yearstdMax,length=numpts),ncol=numpts,nrow=numpts,byrow = TRUE)
daystdmat=matrix(seq(0,daystdMax,length=numpts),ncol=numpts,nrow=numpts,byrow = FALSE)
yearstds=yrstdmat[1:(numpts^2)]
daystds=daystdmat[1:(numpts^2)]
require(zoo) #for use in fitness calculations
#Reading in the appropriate fitness function
set_wrkdir()
source(file = paste("fitcurve/",fitfile,".R",sep=""))
#Reading in mean year, assigning to appropriate variables
load(paste("data-years/",locName,"Dat.Rdata",sep = ""),envir= e <- new.env())
precip.means=e$daily.means$PRCP.means
temp.means=e$daily.means$TMAX.means
remove(list="e")
#smoothing across three repetitions of the year, using middle one (so that boundaries touch)
smooth.tempyrs=loess.smooth(rep(1:(365*3)),rep(temp.means[1:365],3),evaluation = 365*3,span=1/18)
smooth.temp=smooth.tempyrs$y[366:(366+364)]
#Smoothing again, this time across precip
smooth.precipyrs=loess.smooth(rep(1:(365*3)),rep(precip.means[1:365],3),evaluation = 365*3,span=1/18)
smooth.precip=smooth.precipyrs$y[366:(366+364)]
if(actprecip==FALSE){
meanYr=as.data.frame(cbind(1:365,smooth.temp,rep(0,365)))
}else{
meanYr=as.data.frame(cbind(1:365,smooth.temp,smooth.precip))
}
colnames(meanYr)=c("day","temp","precip")
#Calculate the "base temp" for cumulative temp calculations, taking baseTempQth quantile
baseTemp=sort(meanYr$temp)[round(365/baseTempQ)]
#Pull in the appropriate functions
source("scripts/var_exper/prepstuff.R")
mutdist=0 #to avoid error in the part of rate_setup.R that we're not using
source("scripts/rate_setup.R")
source("scripts/windows_subs.R")
#Make a dataframe to store the results of each run
totnum=length(yearstds)*length(traitslist)*slownum #total number of runs
#Iterate through each each combination of stdev'
i.stdev=1
#Re-load each library needed
require(zoo) #for use in choosing initial points to check
###################################################
# Produce a set of years of appropriate variances #
###################################################
yearstd=yearstds[i.stdev]
daystd=daystds[i.stdev]
i.stdev=3
yearstd=yearstds[i.stdev]
daystd=daystds[i.stdev]
#generate years of climate
years.list=list()
count=1
for(i.year in 1:numYears){
offset=round(rnorm(1,sd=yearstd))
newtemp= meanYr[((1:365+offset[1]) %% 365)+1,2]
newtemp=newtemp+rnorm(365,sd=daystd)
newYear=as.data.frame(cbind(day=1:365,
temp=newtemp,
precip=meanYr$precip,
cuprecip=cumsum(pmax(0,meanYr$precip)),
cutemp=cumsum(pmax(0,newtemp-baseTemp)),
daysq=(1:365)^2,
tempsq=(newtemp)^2,
precipsq=(meanYr$precip)^2,
cutempsq=cumsum(pmin(0,newtemp-baseTemp)^2),
cuprecipsq=cumsum(pmin(0,meanYr$precip)^2)
))
fit.daily=fit_fn(newYear)
fit.tot=c(rollapply(c(fit.daily,rep(0,duration-1)),duration,by=1,sum))
newYear=cbind(newYear,fit.daily=fit.daily,fit.tot=fit.tot)
years.list[[count]]<-newYear
count=count+1
}
str(years.list)
years.list[[1]]
head(years.list[[1]])
rapply(years.list,function(x) x$fit.tot)
rapply(years.list,function(x) x$)
rapply(years.list,function(x) x)
head(years.list[[1]])
rapply(years.list,function(x) x[,"fit.tot"])
rapply(years.list,function(x) x[[,"fit.tot"]])
unlist(years.list[[1:2]])
unlist(years.list[[1:2]],ncol=ncol(years.list[[1]]))
ncol(years.list[[1]])
unlist(years.list[[1:2]],ncol=ncol(years.list[[1]]),byrow=TRUE)
length(years.list)
years.list[[1]]
years.list[[1]][,"tot.fit"]
head(years.list[[1]])
years.list[[1]][,"fit.tot"]
numYears=length(years.list)
fitstore=matrix(0,nrow=numYears,ncol=365 #matrix to store fitness per day
for(i.list in 1:numYears){
fitstore[i.list,]=years.list[[i.list]][,"fit.tot"]
}
numYears=length(years.list)
fitstore=matrix(0,nrow=numYears,ncol=365 #matrix to store fitness per day
)
fitstore=matrix(0,nrow=numYears,ncol=365) #matrix to store fitness per day
for(i.list in 1:numYears){
fitstore[i.list,]=years.list[[i.list]][,"fit.tot"]
}
fitstore
apply(fitstore,1,sum)
source('C:/Repos/phenology-cues/scripts/var_exper/prepstuff.R', echo=TRUE)
apply(fitstore,2,sum)
geofit=apply(log(fitstore),2,sum)
geofit
geofit=apply(-log(fitstore),2,sum)
geofit
fistore
fitstore
geofit=apply(-log(fitstore),2,sum)
dim(geofit)
str(geofit)
length(geofit
x11()
plot(geofit)
geofit=apply(log(fitstore),2,sum)
plot(geofit)
max(geofit)
which(geofit==max(geofit)
)
which(geofit==max(geofit))
opt_day<-function(years.list){
numYears=length(years.list)
fitstore=matrix(0,nrow=numYears,ncol=365) #matrix to store fitness per day
for(i.list in 1:numYears){
fitstore[i.list,]=years.list[[i.list]][,"fit.tot"]
}
geofit=apply(log(fitstore),2,sum)
return(c(b.day=which(geofit==max(geofit)),geofit=max(geofit)))
=======
source("scripts/var_exper/fig1_calculator_opt_comp.R")
tempPath=getwd()
set_wrkdir()
file.copy(from=paste("scripts/var_exper/runfiles/",runFile,sep = ""),
to=paste(tempPath,"/pars-version-",runFile,sep="")
)
warnings()
setwd("G:/Repos/phenology-cues/results/fig1/opt1-10yr_comp1listlist")
setwd("G:/Repos/phenology-cues/results/fig1/opt1-10yr-comp1listlist")
load("fig1dat-versionopt1-10yr-comp1listlist.Rdata",envir=opt<-new.env())
opt.varmeans=opt$overall.res[order(opt$overall.res$yearstd,opt$overall.res$daystd,opt$overall.res$trait),]
setwd("G:/Repos/phenology-cues/results/fig1/compare1-10yr")
load("fig1dat-versioncompare1-10yr.Rdata",envir=brute<-new.env())
varmeans=brute$varmeans
varcompare=cbind(varmeans, opt.varmeans[,c("geofit","traitval")])
names(varcompare)[4:6]=c("geofit.old","geofit.new","traitval.new")
varcompare=cbind(varcompare,res.diff=varcompare$geofit.old+varcompare$geofit.new)
varcompare$geofit.old=-varcompare$geofit.old
varcompare=cbind(varcompare,frac.diff=varcompare$res.diff/mean(varcompare$geofit.old-varcompare$geofit.new))
names(varcompare)[8]="frac.diff"
set_wrkdir()
save(varcompare,file="varCompare.Rdata")
#Are the two lists of years identical
identical(opt$yearlistlist,brute$yearlistlist)
testopt=opt$yearlistlist[[1]][[1]]
testbrute=brute$yearlistlist[[1]][[1]]
compare=testopt[,"temp"]-testbrute[,"temp"]
identical(testopt,testbrute)
varcompare
varcompare=cbind(varcompare,res.diff=varcompare$geofit.old+varcompare$geofit.new)
varcompare=cbind(varmeans, opt.varmeans[,c("geofit","traitval")])
names(varcompare)[4:6]=c("geofit.old","geofit.new","traitval.new")
varcompare=cbind(varcompare,res.diff=varcompare$geofit.old+varcompare$geofit.new)
varcompare$geofit.old=-varcompare$geofit.old
varcompare=cbind(varcompare,frac.diff=varcompare$res.diff/mean(varcompare$geofit.old+varcompare$geofit.new))
names(varcompare)[8]="frac.diff"
set_wrkdir()
save(varcompare,file="varCompare.Rdata")
varcompare
hist(varcompare)
hist(varcompare$frac.diff)
hist(varcompare$frac.diff,breaks=20)
years.list
numyears=length(years.list)
numyears
ptstore=rep(0,365*numYears)
for(i.list in 1:numYears){
ptstore[((i.list-1)*365+1):(i.list*365)]=cummax(years.list[[i.list]][,"temp"])
}
plot(ptstorep)
plot(ptstore)
plot(ptstore,type='l')
testpts=ptstore[-length(ptstore)]+diff(ptstore)/2 #take midpoint between each ptstore
length(ptstore)
ptstore=sort(unique(ptstore))
testpts=ptstore[-length(ptstore)]+diff(ptstore)/2 #take midpoint between each ptstore
length(ptstore)
plot(ptstore)
testpts=ptstore[-length(ptstore)]+diff(ptstore)/2 #take midpoint between each ptstore
points(testpts,col='red')
ptstore[1:5]
abline(v=5)
plot(ptstore)
points(testpts,col='red',pch=3)
fitstore=matrix(0,ncol=length(testpts),nrow=numYears)
curyear=years.list[[1]]
runFile="opt1-10yr_comp1listlist.R"
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
}
}
set_wrkdir()
source("scripts/var_exper/fig1_calculator_opt_comp.R")
tempPath=getwd()
set_wrkdir()
file.copy(from=paste("scripts/var_exper/runfiles/",runFile,sep = ""),
to=paste(tempPath,"/pars-version-",runFile,sep="")
)
setwd("G:/Repos/phenology-cues/results/fig1/opt1-10yr-comp1listlist")
load("fig1dat-versionopt1-10yr-comp1listlist.Rdata",envir=opt<-new.env())
opt.varmeans=opt$overall.res[order(opt$overall.res$yearstd,opt$overall.res$daystd,opt$overall.res$trait),]
setwd("G:/Repos/phenology-cues/results/fig1/compare1-10yr")
load("fig1dat-versioncompare1-10yr.Rdata",envir=brute<-new.env())
varmeans=brute$varmeans
varcompare=cbind(varmeans, opt.varmeans[,c("geofit","traitval")])
names(varcompare)[4:6]=c("geofit.old","geofit.new","traitval.new")
varcompare=cbind(varcompare,res.diff=varcompare$geofit.old+varcompare$geofit.new)
varcompare$geofit.old=-varcompare$geofit.old
varcompare=cbind(varcompare,frac.diff=varcompare$res.diff/mean(varcompare$geofit.old+varcompare$geofit.new))
names(varcompare)[8]="frac.diff"
set_wrkdir()
save(varcompare,file="varCompare.Rdata")
varcompare
runFile="opt1-10yr_comp1listlist.R"
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
}
}
set_wrkdir()
source("scripts/var_exper/fig1_calculator_opt_comp.R")
tempPath=getwd()
set_wrkdir()
file.copy(from=paste("scripts/var_exper/runfiles/",runFile,sep = ""),
to=paste(tempPath,"/pars-version-",runFile,sep="")
)
setwd("G:/Repos/phenology-cues/results/fig1/opt1-10yr-comp1listlist")
load("fig1dat-versionopt1-10yr-comp1listlist.Rdata",envir=opt<-new.env())
opt.varmeans=opt$overall.res[order(opt$overall.res$yearstd,opt$overall.res$daystd,opt$overall.res$trait),]
setwd("G:/Repos/phenology-cues/results/fig1/compare1-10yr")
load("fig1dat-versioncompare1-10yr.Rdata",envir=brute<-new.env())
varmeans=brute$varmeans
varcompare=cbind(varmeans, opt.varmeans[,c("geofit","traitval")])
names(varcompare)[4:6]=c("geofit.old","geofit.new","traitval.new")
varcompare=cbind(varcompare,res.diff=varcompare$geofit.old+varcompare$geofit.new)
varcompare$geofit.old=-varcompare$geofit.old
varcompare=cbind(varcompare,frac.diff=varcompare$res.diff/mean(varcompare$geofit.old+varcompare$geofit.new))
names(varcompare)[8]="frac.diff"
set_wrkdir()
save(varcompare,file="varCompare.Rdata")
#Are the two lists of years identical
identical(opt$yearlistlist,brute$yearlistlist)
varcompare
curyear
plot(curyear$temp)
points(curyear$fit.tot,col='red',pch=3)
points(curyear$fit.tot/max(curyear$fit.tot)*45,col='red',pch=3)
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
plot(curyear$temp)
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
par(mfrow=c(1,2)
plot(curyear$temp)
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
par(mfrow=c(1,2))
plot(curyear$temp)
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
plot(cummax(curyear$temp))
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
pts=unique(cummax(curyear$temp))
pts
which(cummax(curyear$temp)==pts)
firstDay=pts*0
for(i in 1:length(pts)){
firstDay[i]=which(cummax(curyear$temp)==pts[i])
}
warnings()
pts=unique(cummax(curyear$temp))
firstDay=pts*0
for(i in 1:length(pts)){
firstDay[i]=which(cummax(curyear$temp)==pts[i])[1]
}
firstDay
pts
cummax(curyear$temp)[firstDay]
plot(pts)
points(curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts))
plot(pts)
points(curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts),pch=3,col='red')
plot(pts,ylim=c(0,max(pts)))
points(curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts),pch=3,col='red')
varcompare
years.list=yearlistlist[[1]]
curyear=years.list[[1]]
par(mfrow=c(1,2))
plot(curyear$temp)
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
plot(cummax(curyear$temp))
pts=unique(cummax(curyear$temp))
firstDay=pts*0
for(i in 1:length(pts)){
firstDay[i]=which(cummax(curyear$temp)==pts[i])[1]
}
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
plot(pts,ylim=c(0,max(pts)))
points(curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts),pch=3,col='red')
par(mfrow=c(1,2))
plot(curyear$temp)
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
for(i.list in 1:numYears){
ptstore[((i.list-1)*365+1):(i.list*365)]=cummax(years.list[[i.list]][,"temp"])
}
years.list=yearlistlist[[10]]
for(i.ylist in 1:length(years.list)){
years.list[[i.ylist]] = cbind(years.list[[i.ylist]],
fit.tot=c(rollapply(c(years.list[[i.ylist]]$fit.daily,rep(0,duration-1)),duration,by=1,sum)))
}
years.list=yearlistlist[[10]]
for(i.ylist in 1:length(years.list)){
years.list[[i.ylist]] = cbind(years.list[[i.ylist]],
fit.tot=c(rollapply(c(years.list[[i.ylist]]$fit.daily,rep(0,duration-1)),duration,by=1,sum)))
}
par(mfrow=c(1,2))
plot(curyear$temp)
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
plot(cummax(curyear$temp))
pts=unique(cummax(curyear$temp))
curyear=years.list[[1]]
par(mfrow=c(1,2))
plot(curyear$temp)
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
plot(cummax(curyear$temp))
pts=unique(cummax(curyear$temp))
firstDay=pts*0
for(i in 1:length(pts)){
firstDay[i]=which(cummax(curyear$temp)==pts[i])[1]
}
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
plot(pts,ylim=c(0,max(pts)))
points(curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts),pch=3,col='red')
plot(curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts),pts)
plot(curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts),pts,lty='l')
plot(curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts),pts,type='l')
plot(y=curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts),x=pts,type='l')
for(i.year in 2:length(years.list)){
curyear=years.list[[i.year]]
pts=unique(cummax(curyear$temp))
firstDay=pts*0
for(i in 1:length(pts)){
firstDay[i]=which(cummax(curyear$temp)==pts[i])[1]
}
points(y=curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts),x=pts,type='l')
}
curyear=years.list[[1]]
par(mfrow=c(1,2))
plot(curyear$temp)
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
plot(cummax(curyear$temp))
pts=unique(cummax(curyear$temp))
firstDay=pts*0
for(i in 1:length(pts)){
firstDay[i]=which(cummax(curyear$temp)==pts[i])[1]
}
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
plot(pts,ylim=c(0,max(pts)))
points(curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts),pch=3,col='red')
plot(y=curyear$fit.tot,x=pts,type='l')
plot(y=curyear$fit.tot[firstDay],x=pts,type='l')
for(i.year in 2:length(years.list)){
curyear=years.list[[i.year]]
pts=unique(cummax(curyear$temp))
firstDay=pts*0
for(i in 1:length(pts)){
firstDay[i]=which(cummax(curyear$temp)==pts[i])[1]
}
points(y=curyear$fit.tot[firstDay],x=pts,type='l')
}
varcompare
years.list=yearlistlist[[1]]
for(i.ylist in 1:length(years.list)){
years.list[[i.ylist]] = cbind(years.list[[i.ylist]],
fit.tot=c(rollapply(c(years.list[[i.ylist]]$fit.daily,rep(0,duration-1)),duration,by=1,sum)))
}
curyear=years.list[[1]]
par(mfrow=c(1,2))
plot(curyear$temp)
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
plot(cummax(curyear$temp))
pts=unique(cummax(curyear$temp))
firstDay=pts*0
for(i in 1:length(pts)){
firstDay[i]=which(cummax(curyear$temp)==pts[i])[1]
}
points(curyear$fit.tot/max(curyear$fit.tot)*max(curyear$temp),col='red',pch=3)
plot(pts,ylim=c(0,max(pts)))
points(curyear$fit.tot[firstDay]/max(curyear$fit.tot[firstDay])*max(pts),pch=3,col='red')
plot(y=curyear$fit.tot[firstDay],x=pts,type='l')
for(i.year in 2:length(years.list)){
curyear=years.list[[i.year]]
pts=unique(cummax(curyear$temp))
firstDay=pts*0
for(i in 1:length(pts)){
firstDay[i]=which(cummax(curyear$temp)==pts[i])[1]
}
points(y=curyear$fit.tot[firstDay],x=pts,type='l')
}
varcompare
#Run parameters
fitfile="standgauss" #Fitness function to use. Currently only one defined is standgauss
runFile="opt2-1000yr.R"
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
}
}
set_wrkdir()
source("scripts/var_exper/fig1_calculator_opt.R")
tempPath=getwd()
set_wrkdir()
file.copy(from=paste("scripts/var_exper/runfiles/",runFile,sep = ""),
to=paste(tempPath,"/pars-version-",runFile,sep="")
)
runFile="opt2-1000yr.R"
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
}
}
set_wrkdir()
source("scripts/var_exper/fig1_calculator_opt.R")
runFile="opt2-1000yr.R"
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
}
}
set_wrkdir()
source("scripts/var_exper/fig1_calculator_opt.R")
tempPath=getwd()
set_wrkdir()
file.copy(from=paste("scripts/var_exper/runfiles/",runFile,sep = ""),
to=paste(tempPath,"/pars-version-",runFile,sep="")
)
runFile="opt2-1000yr.R"
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
}
}
set_wrkdir()
source("scripts/var_exper/fig1_calculator_opt.R")
tempPath=getwd()
set_wrkdir()
file.copy(from=paste("scripts/var_exper/runfiles/",runFile,sep = ""),
to=paste(tempPath,"/pars-version-",runFile,sep="")
)
runFile="opt2-100yr.R"
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
>>>>>>> 8f45bd1e6a5c8f2a0cfce45534c0605b131e8b45
}
dayres=opt_day(years.list)
dayres
opt_day<-function(years.list){
numYears=length(years.list)
fitstore=matrix(0,nrow=numYears,ncol=365) #matrix to store fitness per day
fitstore[i.list,]=years.list[[i.list]][,"fit.tot"]
for(i.list in 1:numYears){
}
geofit=apply(log(fitstore),2,sum)
return(c(geofit=max(geofit)),b.day=which(geofit==max(geofit)))
}
<<<<<<< HEAD
dayres=opt_day(years.list)
resmat=rbind(resmat,daystd,0,yearstd,0,paste(trait,collapse=", "),slownum,dayres)))
dayres=opt_day(years.list)
opt_day<-function(years.list){
numYears=length(years.list)
fitstore=matrix(0,nrow=numYears,ncol=365) #matrix to store fitness per day
for(i.list in 1:numYears){
fitstore[i.list,]=years.list[[i.list]][,"fit.tot"]
=======
set_wrkdir()
source("scripts/var_exper/fig1_calculator_opt.R")
tempPath=getwd()
set_wrkdir()
file.copy(from=paste("scripts/var_exper/runfiles/",runFile,sep = ""),
to=paste(tempPath,"/pars-version-",runFile,sep="")
)
runFile="opt2-100yr.R"
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
>>>>>>> 8f45bd1e6a5c8f2a0cfce45534c0605b131e8b45
}
geofit=apply(log(fitstore),2,sum)
return(c(geofit=max(geofit),b.day=which(geofit==max(geofit))))
}
dayres=opt_day(years.list)
resmat=rbind(resmat,daystd,0,yearstd,0,paste(trait,collapse=", "),slownum,dayres)))
resmat=rbind(resmat,daystd,0,yearstd,0,paste(trait,collapse=", "),slownum,dayres))
resmat=NULL
#FOR B.DAY
dayres=opt_day(years.list)
resmat=rbind(resmat,daystd,0,yearstd,0,paste(trait,collapse=", "),slownum,dayres))
resmat=rbind(resmat,c(daystd,0,yearstd,0,paste(trait,collapse=", "),slownum,dayres))
trait="day"
resmat=rbind(resmat,c(daystd,0,yearstd,0,paste(trait,collapse=", "),slownum,dayres))
resmat
names(overall.res)=c("daystd","yearstd","trait","geofit","traitval")
names(res.mat)=c("daystd","yearstd","trait","geofit","traitval")
names(resmat)=c("daystd","yearstd","trait","geofit","traitval")
resmat
resmat
resmat=NULL
#FOR B.DAY
dayres=opt_day(years.list)
resmat=rbind(resmat,c(daystd,0,yearstd,0,paste(trait,collapse=", "),slownum,dayres))
resmat
names(res.mat)=c("daystd","yearstd","trait","geofit","traitval")
names(resmat)=c("daystd","yearstd","trait","geofit","traitval")
resmat
resmat=NULL
#FOR B.DAY
dayres=opt_day(years.list)
resmat=rbind(resmat,c(daystd,0,yearstd,0,paste(trait,collapse=", "),slownum,dayres))
resmat=rbind(resmat,c(daystd,0,yearstd,0,paste(trait,collapse=", "),slownum,dayres))
resmat
resmat=rbind(resmat,c(daystd,0,yearstd,0,paste(trait,collapse=", "),0,dayres))
temp.year=years.list[[1]]
x11()
plot(temp.year$cutemp,temp.year$fit.tot)
points(temp.year$temp,temp.year$fit.tot,col='red',type=5)
points(temp.year$temp,temp.year$fit.tot,col='red')
head(years.list[[1]])
newYear=as.data.frame(cbind(day=1:365,
temp=newtemp,
precip=meanYr$precip,
cuprecip=cumsum(pmax(0,meanYr$precip)),
daysq=(1:365)^2,
cutemp=cumsum(pmax(0,newtemp-baseTemp)),
tempsq=(newtemp)^2,
precipsq=(meanYr$precip)^2,
cutempsq=cumsum(pmin(0,newtemp-baseTemp)^2),
cuprecipsq=cumsum(pmin(0,meanYr$precip)^2)
))
newYear
View(newYear)
View(temp.year)
plot(temp.year$cutemp)
plot(temp.year$cutemp,temp.year$fit.tot)
autofun()
aut_fun()
autofun
approxfun(x=temp.year$cutemp,temp.year$fit.tot)
f1=approxfun(x=temp.year$cutemp,y=temp.year$fit.tot)
f1
f1(10)
plot(temp.year$cutemp,temp.year$fit.tot)
points(10.5,f1(10.5))
points(10.5,f1(10.5),col='red')
abline(v=10.5)
plot(temp.year$cutemp,temp.year$fit.tot)
points(10.5,f1(10.5),col='red')
f1(c(1,2,3,4,5))
temp.year$fit.tot[1:5]
fname=paste(f,i,sep="")
year.cur=years.list[[i]]
i=1
year.cur=years.list[[i]]
fname=paste('f',i,sep="")
assign(fname,approxfun(x=year.cur$cutemp,y=year.cur$fit.tot))
f1
for(i in 1:numYears){
year.cur=years.list[[i]]
fname=paste('f',i,sep="")
assign(fname,approxfun(x=year.cur$cutemp,y=year.cur$fit.tot))
}
head(year.cur)
ptstore[((i.list-1)*365+1):i.list*365]=years.list[[i.list]][,"cutemp"]
ptstore=rep(0,numYears*365
for(i.list in 1:numYears){
ptstore[((i.list-1)*365+1):i.list*365]=years.list[[i.list]][,"cutemp"]
}
ptstore=rep(0,numYears*365
)
<<<<<<< HEAD
ptstore=rep(0,numYears*365)
for(i.list in 1:numYears){
ptstore[((i.list-1)*365+1):i.list*365]=years.list[[i.list]][,"cutemp"]
}
years.list[[i.list]][,"cutemp"]
for(i.list in 1:numYears){
ptstore[((i.list-1)*365+1):(i.list*365-1)]=years.list[[i.list]][,"cutemp"]
}
length(((i.list-1)*365+1):(i.list*365-1))
length(years.list[[i.list]][,"cutemp"])
length(((i.list-1)*365+1):(i.list*365))
ptstore=rep(0,numYears*365)
for(i.list in 1:numYears){
ptstore[((i.list-1)*365+1):(i.list*365)]=years.list[[i.list]][,"cutemp"]
}
unique(ptstore)
sort(unique(ptstore))
f1
max(year.cur$cutemp)
f1(5000)
f1(testpoints)
testpoints=sort(unique(ptstore))
f1(testpoints)
ptstore=sort(unique(ptstore))
ptstore=sort(unique(ptstore))
testpoints=ptstore[-length(ptstore)]+diff(ptstore)/2
testpoints
ptstore
testpoints
f1(testpoints)
=======
>>>>>>> 8f45bd1e6a5c8f2a0cfce45534c0605b131e8b45
