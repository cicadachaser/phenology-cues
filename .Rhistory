model$coefficients
B
B[1]
B[[1]]
attr(B)
require(mgcv)
load("C:/Users/Collin/Downloads/Patty workspace.txt")
cow="moo"
save.image("~/workspace.RData")
load("~/workspace.RData")
ls()
load("C:/Users/Collin/Downloads/Patty workspace.RData")
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
}
}
set_wrkdir()
getwd()
setwd("~/")
set_wrkdir()
fitfile="standgauss.R"
set_wrkdir()
source(fitcurve/fitfun)
getwd()
source("fitcurve/fitfun")
source(paste("fitcurve/",fitfun,sep=""))
source(paste("fitcurve/",fitfile,sep=""))
source(paste("fitcurve/",fit.file,sep=""))
fit.file="standgauss.R"
set_wrkdir()
source(paste("fitcurve/",fit.file,sep=""))
tempmat=matrix(seq(0,60,length=numpts),ncol=numpts,nrow=numpts,byrow = TRUE)
numpts=500
tempmat=matrix(seq(0,60,length=numpts),ncol=numpts,nrow=numpts,byrow = TRUE)
precipmat=matrix(seq(0,60,length=numpts),ncol=numpts,nrow=numpts,byrow = FALSE)
othermat=matrix(seq(0,60,length=numpts),ncol=numpts,nrow=numpts,byrow = FALSE)
tempv=tempmat[1:(numpts^2)]
otherv=othermat[1:(numpts^2)]
pseudoyear=data.frame("temp"=tempv,other.name=otherv)
head(pseudoyear)
pseudoyear=data.frame("temp"=tempv,get(other.name)=otherv)
other.name
get(other.name)
get("other.name")
pseudoyear=data.frame("temp"=tempv,get("other.name")=otherv)
pseudoyear=data.frame(temp=tempv,other.name=otherv)
pseudoyear
head(pseudoyear)
names(pseudoyear)
names(pseudoyear)[2]<-other.name
names
head(pseudoyear
)
fit=fit_fn(pseudo.year,other.name=other.name)
source(paste("fitcurve/",fit.file,sep=""))
fit=fit_fn(pseudo.year,other.name=other.name)
pseudo.year=data.frame(temp=tempv,placeholder=otherv)
names(pseudo.year)[2] = other.name #replaces "placeholder" with the specified other.name
fit=fit_fn(pseudo.year,other.name=other.name)
head(fit)
x11()
image.plot(x=seq(0,60,length=numpts),
y=seq(0,60,length=numpts),
z=fit,
xlab="Precipitation",
ylab="Temperature",
main="Fitness gained per day",
#col=heat.colors,
cex.lab=1.6,cex.main=1.6,cex.axis=1.5
)
?image.plot
require(graphics)
image.plot(x=seq(0,60,length=numpts),
y=seq(0,60,length=numpts),
z=fit,
xlab="Precipitation",
ylab="Temperature",
main="Fitness gained per day",
#col=heat.colors,
cex.lab=1.6,cex.main=1.6,cex.axis=1.5
)
require(fields)
image.plot(x=seq(0,60,length=numpts),
y=seq(0,60,length=numpts),
z=fit,
xlab="Precipitation",
ylab="Temperature",
main="Fitness gained per day",
#col=heat.colors,
cex.lab=1.6,cex.main=1.6,cex.axis=1.5
)
as.matrix(fit,numpts,numpts)
fit.mat=as.matrix(fit,numpts,numpts)
image.plot(x=seq(0,60,length=numpts),
y=seq(0,60,length=numpts),
z=fit.mat,
xlab="Precipitation",
ylab="Temperature",
main="Fitness gained per day",
#col=heat.colors,
cex.lab=1.6,cex.main=1.6,cex.axis=1.5
)
dim(fit.mat)
fit.mat=matrix(fit,numpts,numpts)
image.plot(x=seq(0,60,length=numpts),
y=seq(0,60,length=numpts),
z=fit.mat,
xlab="Precipitation",
ylab="Temperature",
main="Fitness gained per day",
#col=heat.colors,
cex.lab=1.6,cex.main=1.6,cex.axis=1.5
)
require(fields)
set_wrkdir()
source(paste("fitcurve/",fit.file,sep=""))
tempmat=matrix(seq(min.temp,max.temp,length=numpts),ncol=numpts,nrow=numpts,byrow = TRUE)
othermat=matrix(seq(min.temp,max.temp,length=numpts),ncol=numpts,nrow=numpts,byrow = FALSE)
tempv=tempmat[1:(numpts^2)]
otherv=othermat[1:(numpts^2)]
pseudo.year=data.frame(temp=tempv,placeholder=otherv)
names(pseudo.year)[2] = other.name #replaces "placeholder" with the specified other.name
fit=fit_fn(pseudo.year,other.name=other.name)
fit.mat=matrix(fit,numpts,numpts)
image.plot(x=seq(min.other,max.other,length=numpts),
y=seq(min.temp,max.temp,length=numpts),
z=fit.mat,
xlab=other.name,
ylab="Temperature",
main="Fitness gained per day",
#col=heat.colors,
cex.lab=1.6,cex.main=1.6,cex.axis=1.5
)
fit.file="standgauss.R"
min.temp=0
max.temp=40
min.other=0
max.other=50
numpts=500
climateDat="davisDat.Rdata"
require(fields)
set_wrkdir()
source(paste("fitcurve/",fit.file,sep=""))
tempmat=matrix(seq(min.temp,max.temp,length=numpts),ncol=numpts,nrow=numpts,byrow = TRUE)
othermat=matrix(seq(min.temp,max.temp,length=numpts),ncol=numpts,nrow=numpts,byrow = FALSE)
tempv=tempmat[1:(numpts^2)]
otherv=othermat[1:(numpts^2)]
pseudo.year=data.frame(temp=tempv,placeholder=otherv)
names(pseudo.year)[2] = other.name #replaces "placeholder" with the specified other.name
fit=fit_fn(pseudo.year,other.name=other.name)
fit.mat=matrix(fit,numpts,numpts)
image.plot(x=seq(min.other,max.other,length=numpts),
y=seq(min.temp,max.temp,length=numpts),
z=fit.mat,
xlab=other.name,
ylab="Temperature",
main="Fitness gained per day",
#col=heat.colors,
cex.lab=1.6,cex.main=1.6,cex.axis=1.5
)
max.temp=50
tempmat=matrix(seq(min.temp,max.temp,length=numpts),ncol=numpts,nrow=numpts,byrow = TRUE)
othermat=matrix(seq(min.temp,max.temp,length=numpts),ncol=numpts,nrow=numpts,byrow = FALSE)
tempv=tempmat[1:(numpts^2)]
otherv=othermat[1:(numpts^2)]
pseudo.year=data.frame(temp=tempv,placeholder=otherv)
names(pseudo.year)[2] = other.name #replaces "placeholder" with the specified other.name
fit=fit_fn(pseudo.year,other.name=other.name)
fit.mat=matrix(fit,numpts,numpts)
image.plot(x=seq(min.other,max.other,length=numpts),
y=seq(min.temp,max.temp,length=numpts),
z=fit.mat,
xlab=other.name,
ylab="Temperature",
main="Fitness gained per day",
#col=heat.colors,
cex.lab=1.6,cex.main=1.6,cex.axis=1.5
)
image.plot(x=seq(min.other,max.other,length=numpts),
y=seq(min.temp,max.temp,length=numpts),
z=fit.mat,
xlab=other.name,
ylab="Temperature",
main="Fitness gained per day",
col=heat.colors,
cex.lab=1.6,cex.main=1.6,cex.axis=1.5
)
climate.Dat!=FALSE
climate.File="davisDat.Rdata"
climate.File!=FALSE
?load
load(paste("data-years/",climate.File,sep=""),envir=e <- new.env())
e$all.years
e$yearlist
length(e$yearlist)
years.df=NULL
for(i in 1:length(e$yr.list[[1]])){years.df=rbind(years.df,e$yr.list[[1]][[i]][1:365,])}
years.df
yr.list=e$yearlist
samp.years=sample(1:length(e$yearlist),n.plotyears)
n.plotyears=3
samp.years=sample(1:length(e$yearlist),n.plotyears)
plot.years=e$yearlist[samp.years]
length(plot.years)
plot.years[[1]]
oneyr=cbind(plot.years[[1:length(plot.years)]])
dim(oneyr)
plot.years[[1]]
cbind(plot.years[[1]],plot.years[[2]])
oneyr=rbind(plot.years[[1:length(plot.years)]])
dim(oneyr)
rbind(plot.years[[1]],plot.years[[2]])
dim(rbind(plot.years[[1]],plot.years[[2]]))
dim(rbind(plot.years[[1:2]]))
dim(rbind(plot.years[1:2]))
df <- do.call("rbind", plot.years)
dim(df)
fit.pts=fit_fn(oneyr,other.name)
oneyr
oneyr=do.call("rbind", plot.years)
oneyr
fit.pts=fit_fn(oneyr,other.name)
head(oneyr)
head(as.data.frame(oneyr))
yeargen.davis(best.precip,sd.precip,best.temp,sd.temp,baseTemp=baseTemp)
source("scripts/win_subs.R")
getwd()
source("scripts/windows_subs.R")
yeargen.davis(best.precip,sd.precip,best.temp,sd.temp,baseTemp=baseTemp)
yeargen.davis(best.precip,sd.precip,best.temp,sd.temp,baseTemp=baseTemp)
source("scripts/windows_subs.R")
yeargen.davis(best.precip,sd.precip,best.temp,sd.temp,baseTemp=baseTemp)
yeargen.davis(best.other,sd.other,best.temp,sd.temp,baseTemp=0)
yeargen.davis(best.other,sd.other,best.temp,sd.temp,baseTemp=0,other.name=other.name)
list.yr=yeargen.davis(best.other,sd.other,best.temp,sd.temp,baseTemp=0,other.name=other.name)[[1]]
length(list.yr)
samp.years=sample(1:length(e$yearlist),n.plotyears)
samp.years=sample(1:length(list.yr),n.plotyears)
oneyr=do.call("rbind", list.yr[samp.years])
head(oneyr)
points(jitter((oneyr[,other.name])),(years.df$temp,lwd=2)
points(jitter((oneyr[,other.name])),years.df$temp,lwd=2)
x11()
require(fields)
set_wrkdir()
source(paste("fitcurve/",fit.file,sep=""))
tempmat=matrix(seq(min.temp,max.temp,length=numpts),ncol=numpts,nrow=numpts,byrow = TRUE)
othermat=matrix(seq(min.temp,max.temp,length=numpts),ncol=numpts,nrow=numpts,byrow = FALSE)
tempv=tempmat[1:(numpts^2)]
otherv=othermat[1:(numpts^2)]
pseudo.year=data.frame(temp=tempv,placeholder=otherv)
names(pseudo.year)[2] = other.name #replaces "placeholder" with the specified other.name
fit=fit_fn(pseudo.year,other.name=other.name)
fit.mat=matrix(fit,numpts,numpts)
image.plot(x=seq(min.other,max.other,length=numpts),
y=seq(min.temp,max.temp,length=numpts),
z=fit.mat,
xlab=other.name,
ylab="Temperature",
main="Fitness gained per day",
cex.lab=1.6,cex.main=1.6,cex.axis=1.5
)
if(climate.File!=FALSE){
source("scripts/windows_subs.R")
list.yr=yeargen.davis(best.other,sd.other,best.temp,sd.temp,baseTemp=0,other.name=other.name)[[1]]
samp.years=sample(1:length(list.yr),n.plotyears)
oneyr=do.call("rbind", list.yr[samp.years])
points(jitter((oneyr[,other.name])),years.df$temp,lwd=2)
}
if(climate.File!=FALSE){
source("scripts/windows_subs.R")
list.yr=yeargen.davis(best.other,sd.other,best.temp,sd.temp,baseTemp=0,other.name=other.name)[[1]]
samp.years=sample(1:length(list.yr),n.plotyears)
oneyr=do.call("rbind", list.yr[samp.years])
points(jitter((oneyr[,other.name])),oneyr$temp,lwd=2)
}
yearfun=get(climate.fun)
climate.fun="yeargen.davis"
get(climate.fun)
temp=get(climate.fun)
yearfun=get(climate.fun)
list.yr=yearfun(best.other,sd.other,best.temp,sd.temp,baseTemp=0,other.name=other.name)[[1]]
yearfun
list.files()
get_wd()
getwd()
source("scripts/exploratory/explore_funs.R")
cat("fitness files you might use:")
list.files("fitcurve/")
help.search(yeargen.davis()
help.search("yeargen.davis")
head(fit_fn)
head(exp_fitfun)
cat("Currently we can use yeargen.Davis or yeargen.Ithaca for the climate fun.\n
this should change as we start integrating the new data")
cat("Currently we can use yeargen.Davis or yeargen.Ithaca for the climate fun.
this should change as we start integrating the new data")
cat("Currently we can use yeargen.Davis or yeargen.Ithaca for the climate fun.
This should change as we start integrating the new data")
exp_fitfun()
x11()
#Example call of the function:
exp_fitfun()
yeargen.ithaca()
exp_fitfun(fit.file="standgauss.R",climate.fun="yeargen.ithaca")
exp_fitfun(fit.file="standgauss.R",climate.fun="yeargen.ithaca")
exp_fitfun(fit.file="standgauss.R",climate.fun="yeargen.ithaca")
x11()
exp_fitfun()
install.packages(fGarch)
install.packages("fGarch")
require(fGarch)
skew=2
dsnorm(years$temp,mean=best.temp,sd=sd.temp)
x=seq(0,80,.1)
dsnorm(x,mean=best.temp,sd=sd.temp)
plot(dsnorm(x,mean=best.temp,sd=sd.temp))
skew=.5
x=seq(0,80,.1)
plot(dsnorm(x,mean=best.temp,sd=sd.temp))
plot(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew))
skew=.7
x=seq(0,80,.1)
plot(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew))
skew=.6
x=seq(0,80,.1)
plot(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew))
skew=.5
x=seq(0,80,.1)
plot(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew))
skew=.4
x=seq(0,80,.1)
plot(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew))
skew=.5
x=seq(0,80,.1)
plot(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew))
plot(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew),type='l')
?dsnorm
exp_fitfun(fit.file="skewgauss.R")
exp_fitfun(fit.file="skewgauss.R")
plot(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew),type='l')
x=seq(0,80,.1)
plot(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew),type='l')
max(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew))
which(x==max(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew)))
which(x %in% max(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew)))
near(x,max(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew)))
?near
??near
z=dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew),type='l')
z=dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew)
which(z == max(z))
x[which(z == max(z))]
peak=x[which(z == max(z))]
peak.x=x[which(z == max(z))]
peak.x
z=dsnorm(x,mean=4,sd=sd.temp,xi=skew)
peak.x=x[which(z == max(z))]
install.packages("sn")
x=seq(0,80,.1)
z=dsn(x,xi=40,omega=sd.tempalpha=skew)
library(sn)
x=seq(0,80,.1)
z=dsn(x,xi=40,omega=sd.temp,alpha=skew)
plot(x,z)
skew=-5
x=seq(0,80,.1)
z=dsn(x,xi=40,omega=sd.temp,alpha=skew)
plot(x,z)
z=dsn(x,tau=40,omega=sd.temp,alpha=skew)
plot(x,z)
z=dsn(x,xi=40,omega=sd.temp,alpha=0)
plot(x,z)
points(x,dnorm(x,mean=40,sd=sd.temp),pch=4,col="red")
?optim
?optimise
optimize(obj_fun,interval = c(-500,500),goal=40,maxrange=80,omega=sd.temp,alpha=skew)
obj_fun <- function(location,goal,maxrange,omega,alpha){
x=seq(-(maxrange),maxrange,by=.1)
z=dsn(x,xi=location,omega=omega,alpha=alpha)
return((x[which(z==max(z))]-goal)^2)
}
optimize(obj_fun,interval = c(-500,500),goal=40,maxrange=80,omega=sd.temp,alpha=skew)
optimize(obj_fun,interval = c(-5,5),goal=40,maxrange=80,omega=sd.temp,alpha=skew)
optimize(obj_fun,interval = c(-100,100),goal=40,maxrange=80,omega=sd.temp,alpha=skew)
optimize(obj_fun,interval = c(-100,100),goal=40,maxrange=80,omega=sd.temp,alpha=skew)
optimize(obj_fun,interval = c(-100,100),goal=40,maxrange=80,omega=sd.temp,alpha=skew)
optimize(obj_fun,interval = c(-100,100),goal=40,maxrange=80,omega=sd.temp,alpha=skew)
optimize(obj_fun,interval = c(goal/2,goal*2),goal=40,maxrange=80,omega=sd.temp,alpha=skew)
goal=40
optimize(obj_fun,interval = c(goal/2,goal*2),goal=goal,maxrange=80,omega=sd.temp,alpha=skew)
obj_fun <- function(location,goal,maxrange,omega,alpha){
x=seq(-(maxrange),maxrange,by=.1)
z=dsn(x,xi=location,omega=omega,alpha=alpha)
return((x[which(z==max(z))]-goal)^2)
}
optimize(obj_fun,interval = c(goal/2,goal*2),goal=best.temp,maxrange=80,omega=shape.temp,alpha=skew.t)
best.temp=40; shape.temp=10; #The optimal temp and the sd for the temp-by-fitness curve (which is gaussian)
best.other=10; shape.other=30; #The optimal precip and the sd for the precip-by-fitness curve (which is gaussian)
other.name="precip" #what is the "other" climate covariate we're using?
skew.t=skew.o=.5 #skew values for temp and other skewed gaussians
optimize(obj_fun,interval = c(goal/2,goal*2),goal=best.temp,maxrange=80,omega=shape.temp,alpha=skew.t)
loc.t=optimize(obj_fun,interval = c(goal/2,goal*2),goal=best.temp,maxrange=80,omega=shape.temp,alpha=skew.t)
loc.t=loc.t$minimum
x=seq(0,80,.1)
?dsn
loc.t=optimize(obj_fun,interval = c(goal/2,goal*2),goal=best.temp,maxrange=80,omega=shape.temp,alpha=skew.t)
loc.t=loc.t$minimum #Location parameter (xi) that gives target shape
plot(dsn(x,xi=loc.t,omega=shape.temp,alpha=skew.t),type='l')
x=seq(0,80,.1)
skew.t
skew.t=skew.o=-2 #skew values for temp and other skewed gaussians
loc.t=optimize(obj_fun,interval = c(goal/2,goal*2),goal=best.temp,maxrange=80,omega=shape.temp,alpha=skew.t)
loc.t=loc.t$minimum #Location parameter (xi) that gives target shape
x=seq(0,80,.1)
plot(dsn(x,xi=loc.t,omega=shape.temp,alpha=skew.t),type='l')
loc.t
plot(x,dsn(x,xi=loc.t,omega=shape.temp,alpha=skew.t),type='l')
abline(v=40)
skew.t=skew.o=-5 #skew values for temp and other skewed gaussians
loc.t=optimize(obj_fun,interval = c(goal/2,goal*2),goal=best.temp,maxrange=80,omega=shape.temp,alpha=skew.t)
loc.t=loc.t$minimum #Location parameter (xi) that gives target shape
x=seq(0,80,.1)
plot(x,dsn(x,xi=loc.t,omega=shape.temp,alpha=skew.t),type='l')
abline(v=best.temp)
skew.t=skew.o=-8 #skew values for temp and other skewed gaussians
#plot(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew),type='l')
obj_fun <- function(location,goal,maxrange,omega,alpha){
x=seq(-(maxrange),maxrange,by=.1)
z=dsn(x,xi=location,omega=omega,alpha=alpha)
return((x[which(z==max(z))]-goal)^2)
}
loc.t=optimize(obj_fun,interval = c(goal/2,goal*2),goal=best.temp,maxrange=80,omega=shape.temp,alpha=skew.t)
loc.t=loc.t$minimum #Location parameter (xi) that gives target shape
x=seq(0,80,.1)
plot(x,dsn(x,xi=loc.t,omega=shape.temp,alpha=skew.t),type='l')
abline(v=best.temp)
skew.t=skew.o=-10 #skew values for temp and other skewed gaussians
#x=seq(0,80,.1)
#plot(dsnorm(x,mean=best.temp,sd=sd.temp,xi=skew),type='l')
obj_fun <- function(location,goal,maxrange,omega,alpha){
x=seq(-(maxrange),maxrange,by=.1)
z=dsn(x,xi=location,omega=omega,alpha=alpha)
return((x[which(z==max(z))]-goal)^2)
}
loc.t=optimize(obj_fun,interval = c(goal/2,goal*2),goal=best.temp,maxrange=80,omega=shape.temp,alpha=skew.t)
loc.t=loc.t$minimum #Location parameter (xi) that gives target shape
x=seq(0,80,.1)
plot(x,dsn(x,xi=loc.t,omega=shape.temp,alpha=skew.t),type='l')
abline(v=best.temp)
loc.o=optimize(obj_fun,interval = c(goal/2,goal*2),goal=goal,maxrange=80,omega=shape.other,alpha=skew.o)
loc.o=loc.t$minimum #Location parameter (xi) that gives target shape
loc.o=optimize(obj_fun,interval = c(goal/2,goal*2),goal=goal,maxrange=80,omega=shape.other,alpha=skew.o)
loc.o=loc.o$minimum #Location parameter (xi) that gives target shape
loc.o
loc.t
fit_fn<-function(years,other.name){
dsn(years$temp,xi=loc.t,omega=shape.temp,alpha=skew.t)*
dsnorm(years[,other.name],xi=loc.o,omega=shape.other,alpha=skew.o)
}
exp_fitfun(fit.file="skewgauss.r")
#Script to use exp_fitfun() to look at fitness functions
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
}
}
set_wrkdir()
source("scripts/exploratory/explore_funs.R")
cat("fitness files you might use:")
list.files("fitcurve/")
cat("Currently we can use yeargen.Davis or yeargen.Ithaca for the climate fun.
This should change as we start integrating the new data")
x11()
#Example call of the function:
exp_fitfun(fit.file="standgauss.R",climate.fun="yeargen.ithaca")
exp_fitfun(fit.file="skewgauss.R")
exp_fitfun(fit.file="skewgauss.R")
exp_fitfun(fit.file="standgauss.R",climate.fun="yeargen.ithaca")
exp_fitfun(fit.file="skewgauss.R")
exp_fitfun()
exp_fitfun(fit.file="skewgauss.R")
x=seq(0,80,.1)
best.temp=40; shape.temp=10; skew.t=-10
plot(x,dsn(x,xi=omega=shape.temp,alpha=skew.t),type='l')
best.temp=40; shape.temp=10; skew.t=-10
plot(x,dsn(x,xi=best.temp,omega=shape.temp,alpha=skew.t),type='l')
#exponential decay
iyear=1
decay=10000
fit.file="Standard.gauss"
