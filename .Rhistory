#Plot phenotypes through time
par(mfrow=c(1,1))
pop.temp=do.call(rbind.data.frame,pophistory[c(seq(2,length(years.index),by=100))])
traitmins=NULL
for(i.trait in traitslist){traitmins=c(traitmins,min(pop.temp[,i.trait]))}
traitmaxs=NULL
for(i.trait in traitslist){traitmaxs=c(traitmaxs,max(pop.temp[,i.trait]))}
#x11(width=9,height=6)
if(plotPheno==TRUE){
traitslist=sprintf("b.%s",traits)
for(curgen in c(1,seq(2,numYears,length=20))){
curgen=round(curgen)
cur.pop=pophistory[[curgen]]
if(length(traitslist)<4){ #can just do 3d plot
scatterplot3d(jitter(as.matrix(cur.pop[,traitslist])),type='h',
xlim=c(traitmins[1],traitmaxs[1]),
ylim=c(traitmins[2],traitmaxs[2]),
zlim=c(traitmins[3],traitmaxs[3]))
dev.print(pdf,sprintf("pheno3d-gen%06d-run%s.pdf",curgen,runName))
}else{
cur.ndms=metaMDS(cur.pop[,traitslist],k=2,trymax=100,autotransform = TRUE)
plot(cur.ndms,main=paste("NDMS for generation", curgen))
dev.print(pdf,sprintf("pheno3d-gen%06d-run%s.pdf",curgen,runName))
}
}
}
names
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")#desktop
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
}else{
setwd("C:\\Users\\louie\\Documents\\GitHub\\phenology-cues")} #laptop
}
}
set_wrkdir()
load(paste("results/",names[1],"/",names[1],"_summary.RData",sep=""))
assign(x="sims1",value=list(means=store.mean,max=store.max,names=store.names,coEff=store.coEff,finalpops=finalpops))
load(paste("results/",names[2],"/",names[2],"_summary.RData",sep=""))
assign(x="sims2",value=list(means=store.mean,max=store.max,names=store.names,coEff=store.coEff,finalpops=finalpops))
max1=apply(sims1[["max"]],2,max)
max2=apply(sims2[["max"]],2,max)
setwd("results")
resultsdir=paste("compare",names[1],names[2],sep="")
unlink(resultsdir,recursive = TRUE)
dir.create(resultsdir,showWarnings = FALSE)
setwd(resultsdir)
#plotting scaled means of all runs
col.list=c('red','blue')
dev.new(width=9,height=6)
matplot(cbind(t(sims1[["means"]][,(numYears-viewLength):numYears]/sims1[["max"]][,(numYears-viewLength):numYears]),
t(sims2[["means"]][,(numYears-viewLength):numYears]/sims2[["max"]][,(numYears-viewLength):numYears])),
type='l',col=c(rep("chocolate",numsims),rep("cornflowerblue",numsims)),
main=paste("Scaled fitness through time for all runs",names[1],names[2]),
xlab="generation",
ylab="Raw mean fitness",
cex.lab=1.5,
cex.main=1.8
)
legend(x="bottomright",legend=c(sprintf("max %s",names)),
fill=c("chocolate","cornflowerblue"),cex=2)
abline(h=1)
dev.print(pdf,paste("compare-allruns-scaled.pdf",sep=""))
#Plotting mean of means of runs
meanmeans.1=apply(sims1[["means"]],2,mean)
meanmax.1=apply(sims1[["max"]],2,mean)
meanmeans.2=apply(sims2[["means"]],2,mean)
meanmax.2=apply(sims2[["max"]],2,mean)
matplot(cbind(meanmax.1[(numYears-viewLength):numYears],meanmax.2[(numYears-viewLength):numYears]),
type='l',col=c(rep('red',numsims),rep('blue',numsims)),
main=paste("Mean fitness through time for mean of runs",names[1],names[2]),
xlab="generation",
ylab="Raw mean fitness",
ylim=c(0,max(c(meanmax.1,meanmax.2)))
)
matpoints(cbind(meanmeans.1[(numYears-viewLength):numYears],meanmeans.2[(numYears-viewLength):numYears]),
type='l',col=c("chocolate","cornflowerblue"))
legend(x="bottomright",legend=c(sprintf("max possible %s",names),sprintf("mean %s",names)),
fill=c(col.list,"chocolate","cornflowerblue"),cex=2)
dev.print(pdf,paste("compare-means.pdf",sep=""))
# #Difference of means through time
# plot((meanmeans.1-meanmeans.2),type='l',col="red",
#      main=paste("Fitness of ",names[1],"minus",names[2]),
#      xlab="generation",
#      ylab="Raw mean fitness"
# )
# abline(h=0)
# dev.print(pdf,paste("difference-of-means.pdf",sep=""))
#histogram of difference of means
hist((sims1[["means"]][,(numYears-viewLength):numYears]-sims2[["means"]][,(numYears-viewLength):numYears]),
breaks=30,
main="histogram of differences",
xlab=paste("Fitness of ",names[1],"minus",names[2]),
sub="green is mean")
abline(v=0,col='red',lwd=2)
abline(v=mean(sims1[["means"]]-sims2[["means"]]),lwd=2,col='green')
dev.print(pdf,paste("hist-difference-of-means.pdf",sep=""))
#Scaled mean of means fitness through time
matplot(cbind(meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears],
meanmeans.2[(numYears-viewLength):numYears]/meanmax.2[(numYears-viewLength):numYears]),
type='l',col=c("chocolate","cornflowerblue"),
main=paste("Scaled fitness through time for mean of runs",names[1],names[2]),
xlab="generation",
ylab="Raw mean fitness",
ylim=c(0,1)
)
abline(h=1,col='red')
require(stats)
loess(meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears])
loess(meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears]~1:viewLength)
loess(meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears]~(1:viewLength))
meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears]
dim(meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears])
length(meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears])
length(1:viewLength)
loess((meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears])~(1:viewLength))
xvals=1:viewLength
loess((meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears])~xvals)
mod=loess((meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears])~xvals)
model=loess((meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears])~xvals)
pred=predict(model,xvals)
plot(pred,type='l')
matplot(cbind(meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears],
type='l',col=c("chocolate","cornflowerblue"),
main=paste("Scaled fitness through time for mean of runs",names[1],names[2]),
xlab="generation",
meanmeans.2[(numYears-viewLength):numYears]/meanmax.2[(numYears-viewLength):numYears]),
ylab="Raw mean fitness",
ylim=c(0,1)
)
matplot(cbind(meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears],
meanmeans.2[(numYears-viewLength):numYears]/meanmax.2[(numYears-viewLength):numYears]),
type='l',col=c("chocolate","cornflowerblue"),
main=paste("Scaled fitness through time for mean of runs",names[1],names[2]),
xlab="generation",
ylab="Raw mean fitness",
ylim=c(0,1)
)
xvals=1:viewLength
model=loess((meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears])~xvals)
pred=predict(model,xvals)
points(pred,type='l')
matplot(cbind(meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears],
meanmeans.2[(numYears-viewLength):numYears]/meanmax.2[(numYears-viewLength):numYears]),
type='l',col=c("chocolate","cornflowerblue"),
main=paste("Scaled fitness through time for mean of runs",names[1],names[2]),
xlab="generation",
ylab="Raw mean fitness",
ylim=c(0,1)
)
xvals=1:viewLength
model=loess((meanmeans.1[(numYears-viewLength):numYears]/meanmax.1[(numYears-viewLength):numYears])~xvals)
pred=predict(model,xvals)
points(pred,type='l',lwd=2,col="chocolate",lty=2)
#Add trend for second param set
xvals=1:viewLength
model=loess((meanmeans.2[(numYears-viewLength):numYears]/meanmax.2[(numYears-viewLength):numYears])~xvals)
pred=predict(model,xvals)
points(pred,type='l',lwd=2,col="cornflowerblue",lty=2)
abline(h=1,col='red')
legend(x="bottomright",legend=names,fill=c("chocolate","cornflowerblue"),cex=2)
dev.print(pdf,paste("compare-means-scaled.pdf",sep=""))
#barplot(ish) for the fitness values towards the end of the run
latefit1=apply(sims1[["means"]][,(numYears-viewLength):numYears],1,sum)
latefit2=apply(sims2[["means"]][,(numYears-viewLength):numYears],1,sum)
plot(jitter(c(rep(1,numsims),rep(2,numsims)),factor=.1),c(latefit1,latefit2),
xlim=c(.5,2.5),ylim=c(0,max(c(latefit1,latefit2))),
xaxt='n',
main=paste("Comparing sum fitness over final",viewLength, "years"),
xlab="",
ylab="Sum fitness"
)
axis(1,at=c(1,2),labels = names)
dev.print(pdf,paste("latefitness.pdf",sep=""))
set_wrkdir()
dev.off()
load("~/GitHub/phenology-cues/results/parameter_test/resRunparameter_test1/dat.RData")
library(reshape2)
library(ggplot2)
coeff.eff.sum<-aggregate(cbind(b.day,b.cutemp,b.cuprecip)~gen,data=act.eff,mean)
coeff.eff.sum.melt<- melt(coeff.eff.sum, id.var="gen")
ggplot(coeff.eff.sum.melt,aes(x=gen,y=value,fill=variable))+geom_bar(stat = "identity")
ggplot(coeff.eff.sum.melt,aes(x=gen,y=value,fill=variable))+geom_smooth()
require(vegan)
require(scatterplot3d)
setwd("results")
resultsdir=sprintf("%s/resRun%s",runsname,runName)
setwd(resultsdir)
#Make a matrix of daily fitnesses for all years, cutting out the last day of leap years
yearFit=matrix(0,nrow=length(years.index),ncol=365)
count=1
for(i in years.index){
curfits=years.list[[i]]$fit.daily
if(length(curfits)==366){curfits=curfits[-366]} #to handle leap years, remove last day
yearFit[count,]=curfits;
count=count+1
}
#Calculate the mean fitness accrued each day
par(mar=c(5,5,4,3))
meanFit=apply(yearFit,2,mean)
#calculate the mean fitness for emerging on day x (for all days) [this is using mean fitness accrued per day]
meanFitSum=rollapply(c(meanFit,rep(0,duration-1)),duration,by=1,sum)
for(i.day in 1:365){
meanFitSum=c(meanFitSum,sum(rep(meanFit)[i.day:(i.day+duration-1)]))
}
x11(width=9,height=6)
if(plotExtra==TRUE){
for(curgen in c(1:20,seq(21,length(years.index),length=10))){
curgen=round(curgen)
#arheight=rep(max(meanFit)*1.1,N) #upper bound used for making plots look good
emergeDay=pophistory[[curgen]]$emerge
#     plot(meanFit,type='l',ylim=c(0,max(meanFit)*1.2))
#     arrows(y0=jitter(arheight,factor=1.5),x0=emergeDay,x1=emergeDay+duration-1,length=.1)
#     dev.print(pdf,paste("dailyfit-run",runName,"-gen",curgen,"-meanfit.pdf",sep=""))
#     plot(meanFitSum,type='l',ylim=c(0,max(meanFitSum)*1.2),
#          main=paste("Mean fitness gained, gen",curgen),
#          ylab="Fitness gained",
#          xlab="Julian date",
#          cex.lab=1.3,
#          cex.main=1.3)
#     arheight=jitter(rep(max(meanFitSum)*1.05,N),factor=.8)
#     arrows(y0=arheight+.05*max(meanFitSum),x0=emergeDay,y1=arheight,length=.1)
#     dev.print(pdf,paste("dailyfitSum-run",runName,"-gen",curgen,"-meanfit.pdf",sep=""))
#now calculate the fitSum for THIS YEAR ONLY
FitSum=rollapply(c(years.list[[years.index[[curgen]]]]$fit.daily,rep(0,duration-1)),duration,by=1,sum)
plot(FitSum,type='l',ylim=c(0,max(FitSum)*1.2),
main=paste("Fitness gained this year, gen",curgen),
ylab="Fitness gained",
xlab="Julian date",
cex.lab=1.3,
cex.main=1.3)
arheight=jitter(rep(max(FitSum)*1.05,N),factor=.8)
arrows(y0=arheight+.05*max(FitSum),x0=emergeDay,y1=arheight,length=.1)
points(meanFitSum,type='l',lty=3)
dev.print(pdf,paste("dailyfitSum-run",runName,"-gen",curgen,"-actualfit.pdf",sep=""))
#Now plot each of the coefs by emergence day.
#     for(coefName in c("b.day","b.temp","b.precip")){
#       plot(pophistory[[curgen]][,coefName],pophistory[[curgen]][,"emerge"],
#            main=paste(coefName, "by emergence, gen", curgen),
#            ylab="emergence",
#            xlab=coefName,
#            cex.lab=1.3,
#            cex.main=1.3)
#       dev.print(pdf,paste("Coef_x_emerge-",coefName,"-run",runName,"-gen",curgen,".pdf",sep=""))
#     }
#     coefList=c("b.day","b.temp","b.precip")
#     for(i in 1:3){
#       coef1=coefList[i]
#       coef2=coefList[(i %% 3)+1]
#       curpop=pophistory[[curgen]]
#       plot(x=curpop[,coef1],y=curpop[,coef2],type='n',
#            main=paste(coef1, "by", coef2, "gen", curgen),
#            ylab=coef2,
#            xlab=coef1,
#            cex.lab=1.3,
#            cex.main=1.3)
#       points(x=(curpop[curpop[,"emerge"]>364,coef1]),y=(curpop[curpop[,"emerge"]>364,coef2]),pch=3,col='blue')
#       points(x=(curpop[curpop[,"emerge"]<365,coef1]),y=(curpop[curpop[,"emerge"]<365,coef2]),pch=1,col='black')
#       dev.print(pdf,paste("Coef_x_coef-",coef1,"x",coef2,"-run",runName,"-gen",curgen,".pdf",sep=""))
#     }
}
}
#Calculating changes in mean fitness through time
maxfit=maxActfit=meanfit=emerge.ideal=rep(0,length(years.index))
emerge=matrix(0,ncol=N,nrow=length(years.index))
for(curgen in 1:numYears){
meanfit[curgen]=mean(pophistory[[curgen]]$Wi)
maxActfit[curgen]=max(pophistory[[curgen]]$Wi)
cur.fitness=years.list[[years.index[curgen]]]$fit.daily
cur.fitness.durated=rollapply(c(cur.fitness,rep(0,duration-1)),duration,by=1,sum)
maxfit[curgen]=max(cur.fitness.durated)
emerge[curgen,]=pophistory[[curgen]]$emerge
emerge.ideal[curgen]=min(which(cur.fitness.durated==maxfit[curgen]))
}
#plot emergence times
maxCount=100 #maximum number of years to count
generations=1:length(years.index)
viewGens=generations
if(length(generations)>maxCount){
viewGens=floor(seq(min(generations),max(generations),length.out=maxCount))
}
#Plot when organisms emerge
matplot(jitter(viewGens),emerge[viewGens,],type='p',pch=1,col='black',
main=paste("Emergence days"),
xlab="Generation",
ylab="Emergence day",
cex.lab=1.4,cex.main=1.4)
#add `optimal emergence day' - note this is a vast oversimplification
points(viewGens,emerge.ideal[viewGens],col="red",pch=4,lwd=2)
dev.print(pdf,paste("emerge-run",runName,"-gen",curgen,".pdf",sep=""))
#plot mean fitness through time, showing max possible fitness
plot(maxfit,type='l',col='red',
main=paste("Mean fitness through time for run",runName),
xlab="generation",
ylab="Raw mean fitness",
sub="red is maximum possible",
ylim=c(0,max(maxfit))
)
points(1:length(meanfit),meanfit,type='l')
dev.print(pdf,paste("meanfit-run",runName,"-gen",curgen,".pdf",sep=""))
#plot mean fitness through time, normalized by max fitness
plot(meanfit/maxfit,type='l',col='black',
main=paste("Mean fitness / max possible",runName),
ylab="normalized mean fitness",
xlab="generation",
sub="red is maximum possible",
ylim=c(0,1)
)
abline(h=1,col='red')
dev.print(pdf,paste("meanfitNorm-run",runName,"-gen",curgen,".pdf",sep=""))
#plot max potential fitness and max actual fitness through time
#  ie the fittest individual of each generatoin
plot(maxfit,type='l',col='red',
main=paste("Max achieved fitness through time for run",runName),
xlab="generation",
ylab="Raw max fitness",
sub="red is maximum possible",
ylim=c(0,max(maxfit))
)
points(1:length(maxActfit),maxActfit,type='l')
dev.print(pdf,paste("maxfit-run",runName,"-gen",curgen,".pdf",sep=""))
#Looking at coef changes through time
#  The act.eff is the actual effect size, found by multiplying the coefficient of each indiv by the environmental conditions of their day of emergence.
#    Those plots use crosses to represent individuals who didn't emerge until the final day, and circles for those that emerged on a normal day (ie their cue
act.eff=actTraitEff(years.index,years.list,pophistory,N,traits)
act.vals=actTraitVals(pophistory,numYears,N)
traitslist=sprintf("b.%s",traits)
#x11(width=9,height=6)
par(mar=c(5,5,4,4))
#Plot it all in one
par(mfrow=c(3,1))
ind=1
while(ind<=length(traitslist)){
plotlist=ind:min(ind+2,length(traitslist))
for(cur.trait in plotlist){
emergePlot(indivs=act.eff,trait=traitslist[cur.trait])
}
dev.print(pdf,paste("coefEffects-",paste(traitslist[plotlist],collapse='-'),"-actual-run",runName,".pdf",sep=""))
for(cur.trait in plotlist){
emergePlotYlim(indivs=act.eff,trait=traitslist[cur.trait],ylim=c(0,100))
}
dev.print(pdf,paste("coefEffects-",paste(traitslist[plotlist],collapse='-'),"-actual-run-ylim",runName,".pdf",sep=""))
for(cur.trait in plotlist){
emergePlot(indivs=act.eff[act.eff[,"gen"]>burnIn,],trait=traitslist[cur.trait])
}
dev.print(pdf,paste("coefEffects-",paste(traitslist[plotlist],collapse='-'),"-actual-postburn-run",runName,".pdf",sep=""))
for(cur.trait in plotlist){
traitplot(indivs=act.vals,trait=traitslist[cur.trait])
}
dev.print(pdf,paste("coefVals-",paste(traitslist[plotlist],collapse='-'),"-run",runName,".pdf",sep=""))
for(cur.trait in plotlist){
traitplot(indivs=act.vals[act.vals[,"gen"]>burnIn,],trait=traitslist[cur.trait])
}
dev.print(pdf,paste("coefVals-",paste(traitslist[plotlist],collapse='-'),"-postburn-run",runName,".pdf",sep=""))
ind=max(plotlist)+1
}
#Plot phenotypes through time
par(mfrow=c(1,1))
pop.temp=do.call(rbind.data.frame,pophistory[c(seq(2,length(years.index),by=100))])
traitmins=NULL
for(i.trait in traitslist){traitmins=c(traitmins,min(pop.temp[,i.trait]))}
traitmaxs=NULL
for(i.trait in traitslist){traitmaxs=c(traitmaxs,max(pop.temp[,i.trait]))}
#x11(width=9,height=6)
if(plotPheno==TRUE){
traitslist=sprintf("b.%s",traits)
for(curgen in c(1,seq(2,numYears,length=20))){
curgen=round(curgen)
cur.pop=pophistory[[curgen]]
if(length(traitslist)<4){ #can just do 3d plot
scatterplot3d(jitter(as.matrix(cur.pop[,traitslist])),type='h',
xlim=c(traitmins[1],traitmaxs[1]),
ylim=c(traitmins[2],traitmaxs[2]),
zlim=c(traitmins[3],traitmaxs[3]))
dev.print(pdf,sprintf("pheno3d-gen%06d-run%s.pdf",curgen,runName))
}else{
cur.ndms=metaMDS(cur.pop[,traitslist],k=2,trymax=100,autotransform = TRUE)
plot(cur.ndms,main=paste("NDMS for generation", curgen))
dev.print(pdf,sprintf("pheno3d-gen%06d-run%s.pdf",curgen,runName))
}
}
}
# a few new plotting ideas ------------------------------------------------
library(reshape2)
library(ggplot2)
coeff.eff.sum<-aggregate(cbind(b.day,b.cutemp,b.cuprecip)~gen,data=act.eff,mean)
coeff.eff.sum.melt<- melt(coeff.eff.sum, id.var="gen")
ggplot(coeff.eff.sum.melt,aes(x=gen,y=value,fill=variable))+geom_bar(stat = "identity")
ggplot(coeff.eff.sum.melt,aes(x=gen,y=value,fill=variable))+geom_smooth()
?dist
head(coeff.eff.sum)
head(mtcars)
dist<-dist(as.matrix(coeff.eff.sum))
hc<-hclust(dist)
distmat<-dist(as.matrix(coeff.eff.sum))
hc<-hclust(distmat)
plot(hc)
head(data)
head(act.eff
)
data[data$gen=1,2:3]
data[data$gen==1,2:3]
data[data$gen==1,seq(2:3)]
data[data$gen==1,c(2:3)]
data[data$gen==1,]
data[act.eff$gen==1,2:3]
act.eff[act.eff$gen==1,2:3]
act.eff[act.eff$gen==1,2:3]
head(act.eff)
distmat<-dist(act.eff[act.eff[,1]=1,2:3])
act.eff[act.eff[,1]==1,2:3]
distmat<-dist(act.eff[act.eff[,1]==1,2:4])
hc<-hclust(distmat)
plot(hc)
distmat<-dist(act.eff[act.eff[,1]==1,2:4])
hc<-hclust(distmat)
plot(hc)
gen.1<-act.eff[act.eff[,1]==1,2:4]
gen.1
head(mtcars)
str(mtcars)
as.matrix(mtcars)
rownames(act.eff)<-1:100
nrow(act.eff)
rownames(gen.1)<-1:100
distmat<-dist(gen.1)
hc<-hclust(distmat)
plot(hc)
gen.100<-act.eff[act.eff[,100]==1,2:4]
rownames(gen.100)<-1:100
distmat<-dist(gen.100)
hc<-hclust(distmat)
plot(hc)
gen.100<-act.eff[act.eff[,100]==1,2:4]
rownames(gen.100)<-1:100
gen.1<-act.eff[act.eff[,1]==1,2:4]
rownames(gen.1)<-1:100
distmat<-dist(gen.1)
hc<-hclust(distmat)
plot(hc)
gen.1<-act.eff[act.eff[,1]==1,2:4]
rownames(gen.1)<-1:100
distmat<-dist(gen.1)
hc<-hclust(distmat)
plot(hc)
plot(hc)
?hclust
na.rm(gen.1)
na.omit(gen.1)
gen.1<-na.omit(act.eff[act.eff[,1]==1,2:4])
rownames(gen.1)<-1:100
rownames(gen.1)<-1:nrow(gen.1)
distmat<-dist(gen.1)
hc<-hclust(distmat)
plot(hc)
gen.100<-na.omit(act.eff[act.eff[,100]==1,2:4])
rownames(gen.100)<-1:100
distmat<-dist(gen.100)
hc<-hclust(distmat)
plot(hc)
gen.100<-na.omit(act.eff[act.eff[,100]==1,2:4])
rownames(gen.100)<-1:nrow(gen.100)
gen.100<-na.omit(act.eff[act.eff[,1]==100,2:4])
rownames(gen.100)<-1:nrow(gen.100)
distmat<-dist(gen.100)
hc<-hclust(distmat)
plot(hc)
gen.10<-na.omit(act.eff[act.eff[,1]==10,2:4])
rownames(gen.01)<-1:nrow(gen.10)
distmat<-dist(gen.10)
hc<-hclust(distmat)
plot(hc)
gen.10<-na.omit(act.eff[act.eff[,1]==10,2:4])
rownames(gen.10)<-1:nrow(gen.10)
distmat<-dist(gen.10)
hc<-hclust(distmat)
plot(hc)
gen.300<-na.omit(act.eff[act.eff[,1]==100,2:4])
rownames(gen.300)<-1:nrow(gen.300)
distmat<-dist(gen.300)
hc<-hclust(distmat)
p300<-plot(hc)
gridExtra(p1,p10,p100,p300)
library(gridExtra)
gridExtra(p1,p10,p100,p300)
grid.arrange(p1,p10,p100,p300,ncol=2)
distmat<-dist(gen.1)
hc<-hclust(distmat)
p1<-plot(hc)
gen.10<-na.omit(act.eff[act.eff[,1]==10,2:4])
rownames(gen.10)<-1:nrow(gen.10)
distmat<-dist(gen.10)
hc<-hclust(distmat)
p10<-plot(hc)
gen.100<-na.omit(act.eff[act.eff[,1]==100,2:4])
rownames(gen.100)<-1:nrow(gen.100)
distmat<-dist(gen.100)
hc<-hclust(distmat)
p100<-plot(hc)
gen.300<-na.omit(act.eff[act.eff[,1]==100,2:4])
rownames(gen.300)<-1:nrow(gen.300)
distmat<-dist(gen.300)
hc<-hclust(distmat)
p300<-plot(hc)
grid.arrange(p1,p10,p100,p300,ncol=2)
