rat=runif(3)
cbind(rat,rat)
cbind(rat,rat,r)
cbind(rat,rat,rat)
dim(cbind(rat,rat))
runif(10000)<.1
runif(10000)<.1*rnorm(10000)
(runif(10000)<.1)*rnorm(10000)
?rnorm
generations=24
duration=10
best.temp=15; sd.temp=10; #The optimal temp and the sd for the temp-by-fitness curve (which is gaussian)
best.precip=55; sd.precip=30; #The optimal precip and the sd for the precip-by-fitness curve (which is gaussian)
N=40 #number of individuals
start<-as.data.frame(
constmin=0,constmax=50,
daymin=0,daymax=5,
tempmin=0,tempmax=20,
precipmin=0,precipmax=5
) #this represents the min and max values used when randomly assigning initial values to the population
?as.data.frame
#clear all variables
rm(list=ls())
#libraries
library(timeDate)
library(Cairo) #I'm not sure if we need this with the plotting removed
#System identification
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin"){ #If it's collin
install.packages("cairo")
install.packages("cairo")
install.packages("Cairo")
install.packages("timeDate")
library(timeDate)
library(Cairo) #I'm not sure if we need this with the plotting removed
#System identification
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin"){ #If it's collin
if(Sys.info()[1]=="Linux"){
setwd("/home/collin/Dropbox/Grad school/research projects/yang_cue")
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\lhyang.ent-yang01\\SkyDrive\\Phenology simulation\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\lhyang\\Skydrive\\Phenology simulation\\phenology-cues")} #laptop
}
source("windows_subs.R")
######################
# Setting parameters #
######################
y1.lo<-12 #lowest `healthy temperature' value
y2.lo<-30 # minimum `healthy rainfall'
y1.hi<-21 #Highest `healthy temperature' value
y2.hi<-85 #max `healthy reainfall'
generations=24
duration=1
#input data
davis.daily<-read.csv("davis-data/626713.csv", header=T, na.strings="-9999")
davis.daily$PRCP<-davis.daily$PRCP/10 #precips are reported in tenths of mm
davis.daily$TMAX<-davis.daily$TMAX/10 #temps are reported in tenths of degree C
davis.daily$TMIN<-davis.daily$TMIN/10 #temps are reported in tenths of degree C
davis.daily$DATE2<-as.Date(as.character(davis.daily$DATE),format="%Y %m %d") #DATE2 is date formatted
davis.daily$JULIAN<-julian(davis.daily$DATE2,origin=as.Date("1892-12-31")) #1893-01-01 is day 1...
davis.daily<-read.csv("davis-data/626713.csv", header=T, na.strings="-9999")
davis.daily
head(davis.daily)
davis.daily<-read.csv("davis-data/626713.csv", header=T, na.strings="-9999")
davis.daily$PRCP<-davis.daily$PRCP/10 #precips are reported in tenths of mm
davis.daily$TMAX<-davis.daily$TMAX/10 #temps are reported in tenths of degree C
davis.daily$TMIN<-davis.daily$TMIN/10 #temps are reported in tenths of degree C
davis.daily$DATE2<-as.Date(as.character(davis.daily$DATE),format="%Y %m %d") #DATE2 is date formatted
davis.daily$JULIAN<-julian(davis.daily$DATE2,origin=as.Date("1892-12-31")) #1893-01-01 is day 1...
davis.daily$YEAR<-as.numeric(substr(davis.daily$DATE,1,4)) #simple field for year
davis.daily$MONTH<-as.numeric(substr(davis.daily$DATE,5,6)) #simple field for month
davis.daily$DAY<-as.numeric(substr(davis.daily$DATE,7,8)) #simple field for day
davis.daily<-davis.daily[,c("DATE2","JULIAN", "YEAR","MONTH","DAY","PRCP","TMAX","TMIN")] #simplified dataframe
davis.daily
head(davis.daily)
davis.yearlist<-split(davis.daily,davis.daily$YEAR) #list of each year separated
davis.yearlist
davis.yearlist[[1]]
davis.yearlist[[2]]
davis.yearlist[[5]]
davis.yearnames<-unique(davis.daily$YEAR) #gives a list of all the years in the data
davis.yearnames
for (i in 1:length(davis.yearnames)){
davis.yearlist[[i]]$DAY.OF.YEAR<-julian(davis.yearlist[[i]]$DATE2, origin=as.Date(paste(davis.yearnames[i],"01","01",sep="-")))+1 #add +1 so that the first day of the year is 1, not zero.
}
head(davis.yearlist[[1]])
(davis.yearlist[[1]][5:15])
(davis.yearlist[[1]][5:15,]
)
davis.yearlist[[1]][5:15,]
davis.yearlist[[1]][20:30,]
davis.daily<-read.csv("davis-data/626713.csv", header=T, na.strings="-9999")
davis.daily$PRCP<-davis.daily$PRCP/10 #precips are reported in tenths of mm
davis.daily$TMAX<-davis.daily$TMAX/10 #temps are reported in tenths of degree C
davis.daily$TMIN<-davis.daily$TMIN/10 #temps are reported in tenths of degree C
davis.daily$DATE2<-as.Date(as.character(davis.daily$DATE),format="%Y %m %d") #DATE2 is date formatted
davis.daily$JULIAN<-julian(davis.daily$DATE2,origin=as.Date("1892-12-31")) #1893-01-01 is day 1...
davis.daily$YEAR<-as.numeric(substr(davis.daily$DATE,1,4)) #simple field for year
davis.daily$MONTH<-as.numeric(substr(davis.daily$DATE,5,6)) #simple field for month
davis.daily$DAY<-as.numeric(substr(davis.daily$DATE,7,8)) #simple field for day
davis.daily<-davis.daily[,c("DATE2","JULIAN", "YEAR","MONTH","DAY","PRCP","TMAX","TMIN")] #simplified dataframe
davis.yearlist<-split(davis.daily,davis.daily$YEAR) #list of each year separated
davis.yearnames<-unique(davis.daily$YEAR) #gives a list of all the years in the data
#calculates the "day of year", i.e. Jan 1 is 1, and 12/31 is 365
#adds a DAY.OF.YEAR column to each dataframe in the year list
for (i in 1:length(davis.yearnames)){
davis.yearlist[[i]]$DAY.OF.YEAR<-julian(davis.yearlist[[i]]$DATE2, origin=as.Date(paste(davis.yearnames[i],"01","01",sep="-")))+1 #add +1 so that the first day of the year is 1, not zero.
}
davis.daily<-unsplit(davis.yearlist,davis.daily$YEAR)
davis.daily.means<-aggregate(cbind(TMAX,TMIN,PRCP)~DAY.OF.YEAR, data=davis.daily, mean)
davis.daily.means
head(davis.daily.means)
davis.daily.means[360:380]
davis.daily.means[360:380,]
dim(davis.daily)
davis.daily.means[500:530,]
davis.daily.means[360:380,]
dim(davis.daily)
tail(davis.daily)
sum(is.na(davis.daily[,1]))
sum(is.na(davis.daily[,2]))
sum(is.na(davis.daily[,3]))
sum(is.na(davis.daily[3,]))
davis.daily[,1]
davis.daily[100:110,]
davis.daily[300:310,]
davis.daily[400:410,]
davis.daily.means<-aggregate(cbind(TMAX,TMIN,PRCP)~DAY.OF.YEAR, data=davis.daily, mean)
davis.yearvar<-data.frame(row.names=davis.yearnames) #dataframe to hold environmental variability
head(davis.yearvar)
davis.yearvar
for (i in 1:length(davis.yearnames)){
#temporary dataframe to compare with mean conditions
#this creates a VAR.x for each year and a VAR.y for the daily means
comparison<-merge(davis.yearlist[[i]],davis.daily.means,by="DAY.OF.YEAR")
#number of complete cases (is.na=F) for each year
davis.yearvar[i,"TMAX.N"]<-sum(complete.cases(davis.yearlist[[i]]$TMAX))
davis.yearvar[i,"TMIN.N"]<-sum(complete.cases(davis.yearlist[[i]]$TMIN))
davis.yearvar[i,"PRCP.N"]<-sum(complete.cases(davis.yearlist[[i]]$PRCP))
#sum of squared differences with an average year - how weird is each year?
#some years have incomplete data, so this is the mean SS per observed day
davis.yearvar[i,"TMAX.SS"]<-(sum(comparison$TMAX.x-comparison$TMAX.y,na.rm=T)^2)/davis.yearvar[i,"TMAX.N"]
davis.yearvar[i,"TMIN.SS"]<-(sum(comparison$TMIN.x-comparison$TMIN.y,na.rm=T)^2)/davis.yearvar[i,"TMIN.N"]
davis.yearvar[i,"PRCP.SS"]<-(sum(comparison$PRCP.x-comparison$PRCP.y,na.rm=T)^2)/davis.yearvar[i,"PRCP.N"]
#CV within years - how variable is each year?
davis.yearvar[i,"TMAX.CV"]<-sd(comparison$TMAX.x,na.rm=T)/mean(comparison$TMAX.x,na.rm=T)
davis.yearvar[i,"TMIN.CV"]<-sd(comparison$TMIN.x,na.rm=T)/mean(comparison$TMIN.x,na.rm=T)
davis.yearvar[i,"PRCP.CV"]<-sd(comparison$PRCP.x,na.rm=T)/mean(comparison$PRCP.x,na.rm=T)
#sum of differences (not squared) with an average year - how hot/wet is each year?
#some years have incomplete data, so this is the mean difference per observed day
davis.yearvar[i,"TMAX.DEL"]<-sum(comparison$TMAX.x-comparison$TMAX.y,na.rm=T)/davis.yearvar[i,"TMAX.N"]
davis.yearvar[i,"TMIN.DEL"]<-sum(comparison$TMIN.x-comparison$TMIN.y,na.rm=T)/davis.yearvar[i,"TMIN.N"]
davis.yearvar[i,"PRCP.DEL"]<-sum(comparison$PRCP.x-comparison$PRCP.y,na.rm=T)/davis.yearvar[i,"PRCP.N"]
}
head(davis.yearvar)
davis.yearlist[[1]]
period<-120
x<-1:120
y <- sin(2*pi*x/period) + runif(length(x),-1,1)
> plot(x,y, main="Sine Curve + 'Uniform' Noise")
plot(x,y, main="Sine Curve + 'Uniform' Noise")
mtext("showing loess smoothing (local regression smoothing)")
y.loess <- loess(y ~ x, span=0.75, data.frame(x=x, y=y))
y.predict <- predict(y.loess, data.frame(x=x))
lines(x,y.predict)
y <- sample(N=80,sin(2*pi*x/period) + runif(length(x),-1,1))
?sample
y <- sample(size=80,x=sin(2*pi*x/period) + runif(length(x),-1,1))
period<-120
x<-1:120
y <- sample(size=80,x=sin(2*pi*x/period) + runif(length(x),-1,1))
plot(x,y, main="Sine Curve + 'Uniform' Noise")
lines(x,y.predict)
?matrix
?rmultinom
temp=runif(6)
temp=sort(temp)
tem
temp
dif(temp)
diff(temp)
sum(diff(temp))
temp=runif(4)
temp=c(runif(4),0,1)
temp=sort(temp)
temp
diff(temp)
sum(diff(temp))
rates=diff(temp)
multinom(1,5,rates)
rmultinom(n=1,size=5,prob=rates)
rmultinom(n=1,size=5,prob=rates)
rmultinom(n=1,size=5,prob=rates)
rmultinom(n=1,size=5,prob=rates)
rmultinom(n=1,size=5,prob=rates)
rmultinom(n=1,size=5,prob=rates)
rmultinom(n=1,size=5,prob=rates)
rmultinom(n=1,size=5,prob=rates)
rmultinom(n=1,size=5,prob=rates)
rmultinom(n=1,size=5,prob=rates)
rmultinom(n=2,size=5,prob=rates)
