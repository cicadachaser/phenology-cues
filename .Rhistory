davis.daily$JULIAN<-julian(davis.daily$DATE2,origin=as.Date("1913-12-31")) #1914-01-01 is day 1
davis.daily$MONTH<-as.numeric(substr(davis.daily$DATE,5,6)) #simple field for month
davis.daily$DAY<-as.numeric(substr(davis.daily$DATE,7,8)) #simple field for day
davis.daily<-davis.daily[,c("DATE2","JULIAN", "YEAR","MONTH","DAY","PRCP","TMAX","TMIN")] #simplified dataframe
#however, there are 143 missing rows
missing.row.count<-max(davis.daily$JULIAN)-length(davis.daily$JULIAN)
#this is a list of the missing JULIAN days
missing.days<-which((seq(1:max(davis.daily$JULIAN)) %in% davis.daily$JULIAN)=="FALSE")
#create a empty dataframe with 143 rows
missing.days.df <- data.frame(matrix(ncol = 8, nrow = missing.row.count))  #this need to be generalized for any number of missing rows
#create matching column names
colnames(missing.days.df)<-colnames(davis.daily)
#fill in the missing Julian days
missing.days.df$JULIAN<-missing.days
missing.days.df$DATE2<-as.Date(origin=as.Date("1913-12-31"),missing.days.df$JULIAN)
missing.days.df$YEAR<-as.numeric(format(missing.days.df$DATE2, format="%Y"))
missing.days.df$MONTH<-as.numeric(format(missing.days.df$DATE2, format="%m"))
missing.days.df$DAY<-as.numeric(format(missing.days.df$DATE2, format="%d"))
#Combine the two dataframes
davis.daily.w.missing.days<-rbind(missing.days.df,davis.daily)
#sort by JULIAN
davis.daily.w.missing.days<-davis.daily.w.missing.days[order(davis.daily.w.missing.days$JULIAN),]
#this is just a shortcut to expedite - should be cleaned up?
davis.daily<-davis.daily.w.missing.days
davis.yearlist<-split(davis.daily,davis.daily$YEAR) #list of each year separated
davis.yearnames<-unique(davis.daily$YEAR) #gives a list of all the years in the data
#calculates the "day of year", i.e. Jan 1 is 1, and 12/31 is 365
#adds a DAY.OF.YEAR column to each dataframe in the year list
for (i in 1:length(davis.yearnames)){
davis.yearlist[[i]]$DAY.OF.YEAR<-julian(davis.yearlist[[i]]$DATE2, origin=as.Date(paste(davis.yearnames[i],"01","01",sep="-")))+1 #add +1 so that the first day of the year is 1, not zero.
}
davis.daily<-unsplit(davis.yearlist,davis.daily$YEAR)
davis.daily.means<-aggregate(cbind(TMAX,TMIN,PRCP)~DAY.OF.YEAR, data=davis.daily, mean)
a.out<-amelia(davis.daily,m=1,ts="DAY.OF.YEAR",cs="YEAR",idvars=c("DATE2","MONTH","DAY","JULIAN"),intercs=T,splinetime=6)
a.out
years.temp=a.out[[1]]$imp1
years.temp=years.temp["DAY.OF.YEAR","TMAX","PRECIP","YEAR"]
years.temp=a.out[[1]]$imp1
head(years.temp)
years.temp=years.temp[c("DAY.OF.YEAR","TMAX","PRECIP","YEAR")]
years.temp=years.temp[c("DAY.OF.YEAR","TMAX","PRCP","YEAR")]
colnames(years.temp)<-c("day","temp","precip","year")
years.temp=a.out[[1]]$imp1
years.temp=years.temp[c("DAY.OF.YEAR","TMAX","PRCP","YEAR")]
colnames(years.temp)<-c("day","temp","precip","year")
years.list=split(x=years.temp,f=years.temp$year)
years.temp=do.call(rbind.data.frame,years.list)
daily.fit=dnorm(years.temp$temp,mean=best.temp,sd=sd.temp)*dnorm(years.temp$precip,mean=best.precip,sd=sd.precip)
years.temp=cbind(years.temp,daily.fit)
years.list=split(years.temp,f=years.temp$year)
#clear all variables
rm(list=ls())
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()[1]=="Linux"){
setwd("/home/collin/Dropbox/Grad school/research projects/yang_cue")
}else{
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\lhyang.ent-yang01\\SkyDrive\\Phenology simulation\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\lhyang\\Skydrive\\Phenology simulation\\phenology-cues")} #laptop
}
}
ptm <-proc.time()
#########################
# Simulation parameters #
#########################
runType="standard" ##THIS DETERMINES WHAT KIND OF YEARS WE'RE USING!
#unitTestConst is for running the population through a unit test with the same gaussian fitness every year
#and constant environmental conditions
#unitTestRand will be for running the populations through a
#unit test with the same gaussian fitness every year and random envi conditions
#standard is for running the populations through a set of replications of the first 10 good years of the davis data
runName="davisTest" #string without spaces (for simplicity)
duration=10
N=100 #number of individuals
numYears=1500
best.temp=15; sd.temp=10; #The optimal temp and the sd for the temp-by-fitness curve (which is gaussian)
best.precip=55; sd.precip=30; #The optimal precip and the sd for the precip-by-fitness curve (which is gaussian)
start<-data.frame(  #this represents the min and max values used when randomly assigning initial values to the population
daymin=0,daymax=100,
tempmin=0,tempmax=10,
precipmin=0,precipmax=10)
sds<-data.frame( #standard deviations for trait mutations. Currently set so that variance = max initial trait value
day=sqrt(start$daymax)/10,
temp=sqrt(start$tempmax)/10,
precip=sqrt(start$precipmax)/10)
mutrate<-data.frame( #probability of each trait mutating in an individual. Mutations are independent of one another
const=.1,
day=.1,
temp=.1,
precip=.1)
years.index=rep(1:100,length.out=numYears) # This is the list of which year.list data to use for each generation of the model
#######################################
# Handling libraries and source files #
#######################################
#libraries
library(timeDate)
# library(Cairo) #I'm not sure if we need this with the plotting removed
library(zoo)
#Set appropriate working directory
set_wrkdir()
#Load sources file(s)
source("windows_subs.R")
###############################
# Generate environmental data #
###############################
#Based on the value of "runType", generate the appropriate type of data.
if(runType=="standard"){
years.list=yeargen.davis(best.temp = best.temp,sd.temp = sd.temp,
best.precip = best.precip,sd.precip = sd.precip)
} else if(runType=="unitTestConst"){
out=yeargen.const(numYears)
years.list=out[["years.list"]]
years.index=rep(1,numYears)
} else if (runType=="unitTestRand"){
out=yeargen.rand(numYears)
years.list=out[["years.list"]]
}
a.out
years.list=yeargen.davis(best.temp = best.temp,sd.temp = sd.temp,
best.precip = best.precip,sd.precip = sd.precip)
years.list=yearmk_davis()
years.list
years.list[[1]]
years.temp=do.call(rbind.data.frame,years.list)
daily.fit=dnorm(years.temp$temp,mean=best.temp,sd=sd.temp)*dnorm(years.temp$precip,mean=best.precip,sd=sd.precip)
years.temp=cbind(years.temp,daily.fit)
years.list=split(years.temp,f=years.temp$year)
save(list=years.list,file = paste("data-years/",fileName,sep=""))
save(list=years.list,file = paste("data-years/",fileName,".Rdata",sep=""))
save(list=list(years.list),file = paste("data-years/",fileName,".Rdata",sep=""))
?save
save(years.list,file = paste("data-years/",fileName,".Rdata",sep=""))
fileName="davisDat.Rdata"
save(years.list,file = paste("data-years/",fileName,".Rdata",sep=""))
#CURRENTLY IN THE "SLOW AND CORRECT" STAGE
#optimize AFTER we confirm it works
#clear all variables
rm(list=ls())
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()[1]=="Linux"){
setwd("/home/collin/Dropbox/Grad school/research projects/yang_cue")
}else{
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\lhyang.ent-yang01\\SkyDrive\\Phenology simulation\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\lhyang\\Skydrive\\Phenology simulation\\phenology-cues")} #laptop
}
}
ptm <-proc.time()
#########################
# Simulation parameters #
#########################
runType="standard" ##THIS DETERMINES WHAT KIND OF YEARS WE'RE USING!
#unitTestConst is for running the population through a unit test with the same gaussian fitness every year
#and constant environmental conditions
#unitTestRand will be for running the populations through a
#unit test with the same gaussian fitness every year and random envi conditions
#standard is for running the populations through a set of replications of the first 10 good years of the davis data
runName="davisTest" #string without spaces (for simplicity)
duration=10
N=100 #number of individuals
numYears=1500
best.temp=15; sd.temp=10; #The optimal temp and the sd for the temp-by-fitness curve (which is gaussian)
best.precip=55; sd.precip=30; #The optimal precip and the sd for the precip-by-fitness curve (which is gaussian)
start<-data.frame(  #this represents the min and max values used when randomly assigning initial values to the population
daymin=0,daymax=100,
tempmin=0,tempmax=10,
precipmin=0,precipmax=10)
sds<-data.frame( #standard deviations for trait mutations. Currently set so that variance = max initial trait value
day=sqrt(start$daymax)/10,
temp=sqrt(start$tempmax)/10,
precip=sqrt(start$precipmax)/10)
mutrate<-data.frame( #probability of each trait mutating in an individual. Mutations are independent of one another
const=.1,
day=.1,
temp=.1,
precip=.1)
years.index=rep(1:100,length.out=numYears) # This is the list of which year.list data to use for each generation of the model
#######################################
# Handling libraries and source files #
#######################################
#libraries
library(timeDate)
# library(Cairo) #I'm not sure if we need this with the plotting removed
library(zoo)
#Set appropriate working directory
set_wrkdir()
#Load sources file(s)
source("windows_subs.R")
###############################
# Generate environmental data #
###############################
#Based on the value of "runType", generate the appropriate type of data.
if(runType=="standard"){
years.list=yeargen.davis(best.temp = best.temp,sd.temp = sd.temp,
best.precip = best.precip,sd.precip = sd.precip)
} else if(runType=="unitTestConst"){
out=yeargen.const(numYears)
years.list=out[["years.list"]]
years.index=rep(1,numYears)
} else if (runType=="unitTestRand"){
out=yeargen.rand(numYears)
years.list=out[["years.list"]]
}
#CURRENTLY IN THE "SLOW AND CORRECT" STAGE
#optimize AFTER we confirm it works
#clear all variables
rm(list=ls())
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()[1]=="Linux"){
setwd("/home/collin/Dropbox/Grad school/research projects/yang_cue")
}else{
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\lhyang.ent-yang01\\SkyDrive\\Phenology simulation\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\lhyang\\Skydrive\\Phenology simulation\\phenology-cues")} #laptop
}
}
ptm <-proc.time()
#########################
# Simulation parameters #
#########################
runType="standard" ##THIS DETERMINES WHAT KIND OF YEARS WE'RE USING!
#unitTestConst is for running the population through a unit test with the same gaussian fitness every year
#and constant environmental conditions
#unitTestRand will be for running the populations through a
#unit test with the same gaussian fitness every year and random envi conditions
#standard is for running the populations through a set of replications of the first 10 good years of the davis data
runName="davisTest" #string without spaces (for simplicity)
duration=10
N=100 #number of individuals
numYears=1500
best.temp=15; sd.temp=10; #The optimal temp and the sd for the temp-by-fitness curve (which is gaussian)
best.precip=55; sd.precip=30; #The optimal precip and the sd for the precip-by-fitness curve (which is gaussian)
start<-data.frame(  #this represents the min and max values used when randomly assigning initial values to the population
daymin=0,daymax=100,
tempmin=0,tempmax=10,
precipmin=0,precipmax=10)
sds<-data.frame( #standard deviations for trait mutations. Currently set so that variance = max initial trait value
day=sqrt(start$daymax)/10,
temp=sqrt(start$tempmax)/10,
precip=sqrt(start$precipmax)/10)
mutrate<-data.frame( #probability of each trait mutating in an individual. Mutations are independent of one another
const=.1,
day=.1,
temp=.1,
precip=.1)
years.index=rep(1:100,length.out=numYears) # This is the list of which year.list data to use for each generation of the model
#######################################
# Handling libraries and source files #
#######################################
#libraries
library(timeDate)
# library(Cairo) #I'm not sure if we need this with the plotting removed
library(zoo)
#Set appropriate working directory
set_wrkdir()
#Load sources file(s)
source("windows_subs.R")
###############################
# Generate environmental data #
###############################
#Based on the value of "runType", generate the appropriate type of data.
if(runType=="standard"){
years.list=yeargen.davis(best.temp = best.temp,sd.temp = sd.temp,
best.precip = best.precip,sd.precip = sd.precip)
} else if(runType=="unitTestConst"){
out=yeargen.const(numYears)
years.list=out[["years.list"]]
years.index=rep(1,numYears)
} else if (runType=="unitTestRand"){
out=yeargen.rand(numYears)
years.list=out[["years.list"]]
}
years.list=yeargen.davis(best.temp = best.temp,sd.temp = sd.temp,
best.precip = best.precip,sd.precip = sd.precip)
source("windows_subs.R")
years.list=yeargen.davis(best.temp = best.temp,sd.temp = sd.temp,
best.precip = best.precip,sd.precip = sd.precip)
#CURRENTLY IN THE "SLOW AND CORRECT" STAGE
#optimize AFTER we confirm it works
#clear all variables
rm(list=ls())
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()[1]=="Linux"){
setwd("/home/collin/Dropbox/Grad school/research projects/yang_cue")
}else{
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\lhyang.ent-yang01\\SkyDrive\\Phenology simulation\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\lhyang\\Skydrive\\Phenology simulation\\phenology-cues")} #laptop
}
}
ptm <-proc.time()
#########################
# Simulation parameters #
#########################
runType="standard" ##THIS DETERMINES WHAT KIND OF YEARS WE'RE USING!
#unitTestConst is for running the population through a unit test with the same gaussian fitness every year
#and constant environmental conditions
#unitTestRand will be for running the populations through a
#unit test with the same gaussian fitness every year and random envi conditions
#standard is for running the populations through a set of replications of the first 10 good years of the davis data
runName="davisTest" #string without spaces (for simplicity)
duration=10
N=100 #number of individuals
numYears=1500
best.temp=15; sd.temp=10; #The optimal temp and the sd for the temp-by-fitness curve (which is gaussian)
best.precip=55; sd.precip=30; #The optimal precip and the sd for the precip-by-fitness curve (which is gaussian)
start<-data.frame(  #this represents the min and max values used when randomly assigning initial values to the population
daymin=0,daymax=100,
tempmin=0,tempmax=10,
precipmin=0,precipmax=10)
sds<-data.frame( #standard deviations for trait mutations. Currently set so that variance = max initial trait value
day=sqrt(start$daymax)/10,
temp=sqrt(start$tempmax)/10,
precip=sqrt(start$precipmax)/10)
mutrate<-data.frame( #probability of each trait mutating in an individual. Mutations are independent of one another
const=.1,
day=.1,
temp=.1,
precip=.1)
years.index=rep(1:100,length.out=numYears) # This is the list of which year.list data to use for each generation of the model
#######################################
# Handling libraries and source files #
#######################################
#libraries
library(timeDate)
# library(Cairo) #I'm not sure if we need this with the plotting removed
library(zoo)
#Set appropriate working directory
set_wrkdir()
#Load sources file(s)
source("windows_subs.R")
###############################
# Generate environmental data #
###############################
#Based on the value of "runType", generate the appropriate type of data.
if(runType=="standard"){
years.list=yeargen.davis(best.temp = best.temp,sd.temp = sd.temp,
best.precip = best.precip,sd.precip = sd.precip)
} else if(runType=="unitTestConst"){
out=yeargen.const(numYears)
years.list=out[["years.list"]]
years.index=rep(1,numYears)
} else if (runType=="unitTestRand"){
out=yeargen.rand(numYears)
years.list=out[["years.list"]]
}
#CURRENTLY IN THE "SLOW AND CORRECT" STAGE
#optimize AFTER we confirm it works
#clear all variables
rm(list=ls())
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()[1]=="Linux"){
setwd("/home/collin/Dropbox/Grad school/research projects/yang_cue")
}else{
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\lhyang.ent-yang01\\SkyDrive\\Phenology simulation\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\lhyang\\Skydrive\\Phenology simulation\\phenology-cues")} #laptop
}
}
ptm <-proc.time()
#########################
# Simulation parameters #
#########################
runType="standard" ##THIS DETERMINES WHAT KIND OF YEARS WE'RE USING!
#unitTestConst is for running the population through a unit test with the same gaussian fitness every year
#and constant environmental conditions
#unitTestRand will be for running the populations through a
#unit test with the same gaussian fitness every year and random envi conditions
#standard is for running the populations through a set of replications of the first 10 good years of the davis data
runName="davisTest" #string without spaces (for simplicity)
duration=10
N=100 #number of individuals
numYears=1500
best.temp=15; sd.temp=10; #The optimal temp and the sd for the temp-by-fitness curve (which is gaussian)
best.precip=55; sd.precip=30; #The optimal precip and the sd for the precip-by-fitness curve (which is gaussian)
start<-data.frame(  #this represents the min and max values used when randomly assigning initial values to the population
daymin=0,daymax=100,
tempmin=0,tempmax=10,
precipmin=0,precipmax=10)
sds<-data.frame( #standard deviations for trait mutations. Currently set so that variance = max initial trait value
day=sqrt(start$daymax)/10,
temp=sqrt(start$tempmax)/10,
precip=sqrt(start$precipmax)/10)
mutrate<-data.frame( #probability of each trait mutating in an individual. Mutations are independent of one another
const=.1,
day=.1,
temp=.1,
precip=.1)
years.index=rep(1:100,length.out=numYears) # This is the list of which year.list data to use for each generation of the model
#######################################
# Handling libraries and source files #
#######################################
#libraries
library(timeDate)
# library(Cairo) #I'm not sure if we need this with the plotting removed
library(zoo)
#Set appropriate working directory
set_wrkdir()
#Load sources file(s)
source("windows_subs.R")
###############################
# Generate environmental data #
###############################
#Based on the value of "runType", generate the appropriate type of data.
years.list
rm(list=ls())
set_wrkdir<-function(){
#function for setting working directory to the right place given the current computer/user
if(Sys.getenv("USERNAME")=="Collin" || Sys.getenv("USERNAME")=="collin" || Sys.getenv("USERNAME")=="Collin.work"){ #If it's collin
if(Sys.info()[1]=="Linux"){
setwd("/home/collin/Dropbox/Grad school/research projects/yang_cue")
}else{
if(Sys.info()["nodename"]=="DESKTOP-D6QSU8F"){
setwd("G:\\Repos\\phenology-cues") #desktop
}else{
setwd("C:\\Repos\\phenology-cues") #desktop
}
}
}else{
if(Sys.getenv("COMPUTERNAME")=="ENT-YANG01"){
setwd("C:\\Users\\lhyang.ent-yang01\\SkyDrive\\Phenology simulation\\phenology-cues")#desktop
}else{
setwd("C:\\Users\\lhyang\\Skydrive\\Phenology simulation\\phenology-cues")} #laptop
}
}
ptm <-proc.time()
#########################
# Simulation parameters #
#########################
runType="standard" ##THIS DETERMINES WHAT KIND OF YEARS WE'RE USING!
#unitTestConst is for running the population through a unit test with the same gaussian fitness every year
#and constant environmental conditions
#unitTestRand will be for running the populations through a
#unit test with the same gaussian fitness every year and random envi conditions
#standard is for running the populations through a set of replications of the first 10 good years of the davis data
runName="davisTest" #string without spaces (for simplicity)
duration=10
N=100 #number of individuals
numYears=1500
best.temp=15; sd.temp=10; #The optimal temp and the sd for the temp-by-fitness curve (which is gaussian)
best.precip=55; sd.precip=30; #The optimal precip and the sd for the precip-by-fitness curve (which is gaussian)
start<-data.frame(  #this represents the min and max values used when randomly assigning initial values to the population
daymin=0,daymax=100,
tempmin=0,tempmax=10,
precipmin=0,precipmax=10)
sds<-data.frame( #standard deviations for trait mutations. Currently set so that variance = max initial trait value
day=sqrt(start$daymax)/10,
temp=sqrt(start$tempmax)/10,
precip=sqrt(start$precipmax)/10)
mutrate<-data.frame( #probability of each trait mutating in an individual. Mutations are independent of one another
const=.1,
day=.1,
temp=.1,
precip=.1)
years.index=rep(1:100,length.out=numYears) # This is the list of which year.list data to use for each generation of the model
#######################################
# Handling libraries and source files #
#######################################
years.list
rm(list=ls())
years.list
rm(list=ls())
